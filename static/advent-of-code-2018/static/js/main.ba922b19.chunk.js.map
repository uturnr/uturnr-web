{"version":3,"sources":["PuzzleError.js","data sync /^/.//.*$","solutions/Day10Part1.js","data/Day10.js","data/Day11.js","data/Day12.js","data/Day6.js","data/Day7.js","data/Day8.js","data/Day9.js","solutions/Day10Part2.js","solutions/Day11Part1.js","solutions/Day11Part2.js","solutions/Day12Part1.js","solutions/Day12Part2.js","solutions/Day6Part1.js","solutions/Day6Part2.js","solutions/Day7Part1.js","solutions/Day7Part2.js","solutions/Day8Part1.js","solutions/Day8Part2.js","solutions/Day9Part1.js","solutions/Day9Part2.js","App.js","Header.js","Home.js","PuzzleInput.js","Puzzle.js","Main.js","solutions sync /^/.//.*$","serviceWorker.js","index.js"],"names":["PuzzleError","messages","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","reactstrap__WEBPACK_IMPORTED_MODULE_6__","color","concat","this","props","customPuzzleInput","React","Component","map","./Day10","./Day10.js","./Day11","./Day11.js","./Day12","./Day12.js","./Day6","./Day6.js","./Day7","./Day7.js","./Day8","./Day8.js","./Day9","./Day9.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","CurrentSolution","_this","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","hasError","content","error","info","setState","_this2","currentDay","currentPuzzleStr","substring","length","codysData","require","dataArr","default","split","points","lowestStartX","lowestStartY","highestStartX","highestStartY","i","result","exec","startX","Number","startY","point","start","velocity","push","adjX","Math","abs","adjY","byRow","posStartX","posStartY","currentPos","lastXSpots","lastYSpots","xSpots","ySpots","revertMovements","currX","currY","strGrid","row","col","indexOf","drawGrid","applyMovements","lowestCurrX","lowestCurrY","highestCurrX","highestCurrY","undefined","runSolution","err","console","log","_PuzzleError__WEBPACK_IMPORTED_MODULE_6__","r","__webpack_exports__","data","d","emojis","seconds","reactstrap__WEBPACK_IMPORTED_MODULE_7__","serial","calcPower","x","y","trunc","gridArray","rowArray","power","winningCoords","papaGridArray","highestPower9","power9","xWin","yWin","jsxGrid","style","fontWeight","toString","padStart","grid","forEach","index","key","fontSize","progress","winningCoordsAndSize","highestPowerSquare","promiseArray","_loop","step","Promise","setTimeout","size","powerSquare","j","evaluateSquareSize","then","progressBar","document","getElementsByClassName","display","offsetHeight","all","solution","value","transform","initialState","shift","plantGuide","gens","twentyTwoDots","repeat","initialExpanded","len","gensStr","gen","lastGen","thisGen","pattern","plantIdSum","plantId","genCount","originalGenCount","bulkDots","plantCount","trimmedGens","lastTrimmedGen","firstPlantIndex","lastPlantIndex","trimmedGen","finalPattern","patternIndex1","xLow","xHigh","yLow","yHigh","coords","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","string","xy","return","height","yTemplate","Array","fill","xyArray","adjCoords","pair","adjPair","yArray","yIndex","slice","xIndex","closestPair","totalDiffs","coordIndex","xDiff","yDiff","totalDiff","sort","b","pairsToDiscard","scoreCount","parsed","elevenCount","totalDistance","flag","alphabet","steps","prereq","prereqs","remaining","order","allDone","prereqComplete","splice","_i","letter","buildStepObj","time","second","availableTasks","assignedTasks","completedTasks","workers","task","remainingSeconds","getTasks","_i3","assignTasks","runSecond","secondData","workerObj","worker","answer","rows","rowIndex","cells","cellContent","cellIndex","striped","hover","levels","nodes","currentLevel","currentNodeId","highestNodeId","currentParentId","addShell","childCount","metaCount","parentId","shell","childrenRemaining","level","meta","currentNode","parentNodeId","metaTotal","node","metaArr","children","reduce","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","childId","playerCount","lastMarble","circle","players","from","playerIndex","turns","scores","playerId","playMarble","player","winningPlayer","currentMarbleIndex","stealMarbleIndex","playMarbleIndex","highestScore","App","customPuzzleInputsOn","bool","_Header__WEBPACK_IMPORTED_MODULE_7__","setCustomPuzzleInputsOn","_Main__WEBPACK_IMPORTED_MODULE_8__","hot","Header","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","toggle","bind","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","navIsOpen","dropdownIsOpen","item","_Users_codycody_uturnr_advent_of_bad_code_2018_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","puzzleInputName","react__WEBPACK_IMPORTED_MODULE_7___default","reactstrap__WEBPACK_IMPORTED_MODULE_8__","dark","expand","href","onClick","isOpen","navbar","nav","inNavbar","caret","right","Home","day","react_default","reactstrap_es","body","history","process","PuzzleInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","inputData","preventDefault","setStartPuzzle","setCustomPuzzleInput","onSubmit","handleSubmit","for","name","onChange","target","type","preambles","Day9Part2","Day11Part2","Puzzle","started","puzzleInput","startButton","queryString","parse","location","search","CurrentPuzzle","part","puzzleDisplayName","preambleStr","preamble","startButtonTemplate","currentPuzzleComponent","currentPuzzle","src_PuzzleInput","input","Link","to","fa","Main","BrowserRouter","Route","exact","path","component","render","src_Puzzle","assign","./Day10Part1","./Day10Part1.js","./Day10Part2","./Day10Part2.js","./Day11Part1","./Day11Part1.js","./Day11Part2","./Day11Part2.js","./Day12Part1","./Day12Part1.js","./Day12Part2","./Day12Part2.js","./Day6Part1","./Day6Part1.js","./Day6Part2","./Day6Part2.js","./Day7Part1","./Day7Part1.js","./Day7Part2","./Day7Part2.js","./Day8Part1","./Day8Part1.js","./Day8Part2","./Day8Part2.js","./Day9Part1","./Day9Part1.js","./Day9Part2","./Day9Part2.js","Boolean","window","hostname","match","rootEl","getElementById","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba922b19.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert } from 'reactstrap';\n\nclass PuzzleError extends React.Component {\n\n  render() {\n\n    const messages = [\n      'Perhaps there was a problem with your custom puzzle input.',\n      'My apologies!'\n    ];\n\n    return (\n      <div className=\"PuzzleError mt-4\">\n        <Alert color=\"danger\">\n          {`There was an error! `}\n          {`${this.props.customPuzzleInput ? messages[0] : messages[1]} `}\n        </Alert>\n      </div>\n    );\n\n  }\n\n}\n\nexport default PuzzleError;\n","var map = {\n\t\"./Day10\": 23,\n\t\"./Day10.js\": 23,\n\t\"./Day11\": 24,\n\t\"./Day11.js\": 24,\n\t\"./Day12\": 25,\n\t\"./Day12.js\": 25,\n\t\"./Day6\": 26,\n\t\"./Day6.js\": 26,\n\t\"./Day7\": 27,\n\t\"./Day7.js\": 27,\n\t\"./Day8\": 28,\n\t\"./Day8.js\": 28,\n\t\"./Day9\": 29,\n\t\"./Day9.js\": 29\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n\n    const dataArr = data.split('\\n');\n    let points = [];\n\n    // organize data, find bounds\n\n    let lowestStartX = 0;\n    let lowestStartY = 0;\n    let highestStartX = 0;\n    let highestStartY = 0;\n\n    for (let i = 0; i < dataArr.length; i++) {\n      const dataRegex = /position=<(?: *)([-]?\\d*?),(?: *)([-]?\\d*?)> velocity=<(?: *)([-]?\\d*?),(?: *)([-]?\\d*?)>$/g;\n      const result = dataRegex.exec(dataArr[i]);\n      let startX = Number(result[1]);\n      let startY = Number(result[2]);\n      if (startX < lowestStartX) lowestStartX = startX;\n      if (startY < lowestStartY) lowestStartY = startY;\n      if (startX > highestStartX) highestStartX = startX;\n      if (startY > highestStartY) highestStartY = startY;\n      const point = {\n        start: [startX, startY],\n        velocity: [Number(result[3]), Number(result[4])],\n      }\n      points.push(point);\n    }\n\n    // make all positions positive, assign currentPos, assign to rows\n\n    let adjX = Math.abs(lowestStartX);\n    let adjY = Math.abs(lowestStartY);\n    let byRow = [];\n\n    for (let i = 0; i < points.length; i++) {\n      let start = points[i].start;\n      const posStartX = start[0] + adjX;\n      const posStartY = start[1] + adjY;\n      points[i].start = [posStartX, posStartY];\n      points[i].currentPos = [posStartX, posStartY];\n      if (!byRow[posStartY]) byRow[posStartY] = [];\n      byRow[posStartY].push(posStartX);\n    }\n\n    // draw string grid\n\n    let xSpots = highestStartX + adjX;\n    let ySpots = highestStartY + adjY;\n    let lastXSpots;\n    let lastYSpots;\n\n\n    const drawGrid = () => {\n      let strGrid = '';\n\n      for (let row = 0; row < ySpots + adjY; row++) {\n        if (row >= adjY) {\n          for (let col = 0; col < xSpots + adjX; col++) {\n            if (col >= adjX) {\n              if (byRow[row] && byRow[row].indexOf(col) !== -1) {\n                strGrid += '#';\n              } else {\n                strGrid += '.';\n              }\n            }\n          }\n          strGrid += '\\n';\n        }\n      }\n\n      this.setState({\n        content: strGrid,\n      });\n    }\n\n    // apply movements and find new bounds\n\n    const revertMovements = () => {\n      byRow = [];\n      for (let i = 0; i < points.length; i++) {\n        let currX = points[i].currentPos[0] - points[i].velocity[0];\n        let currY = points[i].currentPos[1] - points[i].velocity[1];\n        points[i].currentPos = [currX, currY];\n        if (!byRow[currY]) byRow[currY] = [];\n        byRow[currY].push(currX);\n      }\n      drawGrid();\n    }\n\n    let allDone = false;\n\n    const applyMovements = () => {\n      byRow = [];\n      let lowestCurrX;\n      let lowestCurrY;\n      let highestCurrX;\n      let highestCurrY;\n      lastXSpots = xSpots;\n      lastYSpots = ySpots;\n      for (let i = 0; i < points.length; i++) {\n        let currX = points[i].currentPos[0] + points[i].velocity[0];\n        let currY = points[i].currentPos[1] + points[i].velocity[1];\n        points[i].currentPos = [currX, currY];\n        if (!byRow[currY]) byRow[currY] = [];\n        byRow[currY].push(currX);\n        if (lowestCurrX === undefined || currX < lowestCurrX) lowestCurrX = currX;\n        if (lowestCurrY === undefined || currY < lowestCurrY) lowestCurrY = currY;\n        if (highestCurrX === undefined || currX > highestCurrX) highestCurrX = currX;\n        if (highestCurrY === undefined || currY > highestCurrY) highestCurrY = currY;\n      }\n      xSpots = highestCurrX - lowestCurrX + 1;\n      ySpots = highestCurrY - lowestCurrY + 1;\n      if (xSpots > lastXSpots) {\n        xSpots = lastXSpots;\n        ySpots = lastYSpots;\n        return 'fuck';\n      } else {\n        adjX = lowestCurrX;\n        adjY = lowestCurrY;\n      }\n    }\n\n    while (true) {\n      allDone = applyMovements();\n      if (allDone === 'fuck') {\n        revertMovements();\n        break;\n      }\n    }\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <pre className=\"my-4 monospace\">\n          {this.state.content}\n        </pre>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","const data = `position=< 51730, -30721> velocity=<-5,  3>\nposition=< 41413, -30718> velocity=<-4,  3>\nposition=< 10546,  31104> velocity=<-1, -3>\nposition=< 31125, -41028> velocity=<-3,  4>\nposition=< 10522, -41024> velocity=<-1,  4>\nposition=<-20382, -30716> velocity=< 2,  3>\nposition=<-40971, -51332> velocity=< 4,  5>\nposition=<-51291, -20414> velocity=< 5,  2>\nposition=< 10522,  20803> velocity=<-1, -2>\nposition=<-51305,  10495> velocity=< 5, -1>\nposition=< 31170, -20420> velocity=<-3,  2>\nposition=< 41429,  31099> velocity=<-4, -3>\nposition=< 41426,  10493> velocity=<-4, -1>\nposition=< 41433, -20413> velocity=<-4,  2>\nposition=< 41455, -51328> velocity=<-4,  5>\nposition=<-10075, -51324> velocity=< 1,  5>\nposition=< 41434,  20799> velocity=<-4, -2>\nposition=< 10561,  20799> velocity=<-1, -2>\nposition=<-30707, -30716> velocity=< 3,  3>\nposition=< 10536,  31099> velocity=<-1, -3>\nposition=< 20821,  20801> velocity=<-2, -2>\nposition=<-30694, -30719> velocity=< 3,  3>\nposition=< 10522,  41403> velocity=<-1, -4>\nposition=< 31117, -10111> velocity=<-3,  1>\nposition=< 31109,  10494> velocity=<-3, -1>\nposition=<-30715, -41020> velocity=< 3,  4>\nposition=<-41017,  31103> velocity=< 4, -3>\nposition=< 20861,  51714> velocity=<-2, -5>\nposition=< 31125, -51325> velocity=<-3,  5>\nposition=< 20849, -10112> velocity=<-2,  1>\nposition=< 20829, -41027> velocity=<-2,  4>\nposition=<-10054, -51330> velocity=< 1,  5>\nposition=<-20399,  31100> velocity=< 2, -3>\nposition=< 31117,  31105> velocity=<-3, -3>\nposition=< 31113, -51333> velocity=<-3,  5>\nposition=< 31129,  51715> velocity=<-3, -5>\nposition=< 51761,  51712> velocity=<-5, -5>\nposition=< 51746,  31108> velocity=<-5, -3>\nposition=<-10107, -20420> velocity=< 1,  2>\nposition=<-51291, -51329> velocity=< 5,  5>\nposition=<-30691, -10114> velocity=< 3,  1>\nposition=< 31109,  51707> velocity=<-3, -5>\nposition=< 41418,  41404> velocity=<-4, -4>\nposition=< 41440, -51324> velocity=<-4,  5>\nposition=< 31112,  41407> velocity=<-3, -4>\nposition=< 51749, -41029> velocity=<-5,  4>\nposition=<-41019,  31104> velocity=< 4, -3>\nposition=< 41431, -41025> velocity=<-4,  4>\nposition=< 51773, -51333> velocity=<-5,  5>\nposition=< 41413, -41024> velocity=<-4,  4>\nposition=<-41016, -51329> velocity=< 4,  5>\nposition=<-40967,  41407> velocity=< 4, -4>\nposition=<-20398,  41411> velocity=< 2, -4>\nposition=< 20817,  20796> velocity=<-2, -2>\nposition=<-20379, -51327> velocity=< 2,  5>\nposition=<-40985, -10117> velocity=< 4,  1>\nposition=<-40990,  31108> velocity=< 4, -3>\nposition=<-41003,  20802> velocity=< 4, -2>\nposition=<-10086, -20418> velocity=< 1,  2>\nposition=< 41454, -41024> velocity=<-4,  4>\nposition=< 41458,  41406> velocity=<-4, -4>\nposition=<-10067,  51711> velocity=< 1, -5>\nposition=< 10549,  10498> velocity=<-1, -1>\nposition=<-40995, -41029> velocity=< 4,  4>\nposition=< 31118, -20416> velocity=<-3,  2>\nposition=< 10549,  10500> velocity=<-1, -1>\nposition=<-20393,  41407> velocity=< 2, -4>\nposition=< 51774,  10495> velocity=<-5, -1>\nposition=<-10063,  51708> velocity=< 1, -5>\nposition=< 20853,  31107> velocity=<-2, -3>\nposition=<-41019, -20416> velocity=< 4,  2>\nposition=< 10535, -10117> velocity=<-1,  1>\nposition=< 41446, -20421> velocity=<-4,  2>\nposition=<-40985, -41025> velocity=< 4,  4>\nposition=<-20395, -20412> velocity=< 2,  2>\nposition=< 51738, -10117> velocity=<-5,  1>\nposition=< 10546, -51325> velocity=<-1,  5>\nposition=<-10089, -20418> velocity=< 1,  2>\nposition=<-30715, -20415> velocity=< 3,  2>\nposition=<-40982, -30723> velocity=< 4,  3>\nposition=< 41437, -10114> velocity=<-4,  1>\nposition=<-51299, -20417> velocity=< 5,  2>\nposition=< 41463, -20417> velocity=<-4,  2>\nposition=< 41449,  10495> velocity=<-4, -1>\nposition=< 10511,  51712> velocity=<-1, -5>\nposition=<-51262, -30716> velocity=< 5,  3>\nposition=< 51718, -51333> velocity=<-5,  5>\nposition=< 31154,  10497> velocity=<-3, -1>\nposition=< 41437,  51711> velocity=<-4, -5>\nposition=< 20858, -30724> velocity=<-2,  3>\nposition=<-10095,  10492> velocity=< 1, -1>\nposition=< 41473, -20414> velocity=<-4,  2>\nposition=< 10549, -30717> velocity=<-1,  3>\nposition=< 10517,  31103> velocity=<-1, -3>\nposition=<-30667, -10114> velocity=< 3,  1>\nposition=< 31133,  10498> velocity=<-3, -1>\nposition=<-51282, -51332> velocity=< 5,  5>\nposition=< 31141, -51326> velocity=<-3,  5>\nposition=<-20363,  20797> velocity=< 2, -2>\nposition=<-20383, -20412> velocity=< 2,  2>\nposition=<-40982, -30724> velocity=< 4,  3>\nposition=<-20386,  51716> velocity=< 2, -5>\nposition=< 10525, -20421> velocity=<-1,  2>\nposition=<-51320, -51333> velocity=< 5,  5>\nposition=< 31162, -41027> velocity=<-3,  4>\nposition=<-51310, -51330> velocity=< 5,  5>\nposition=< 41461,  31108> velocity=<-4, -3>\nposition=< 10503, -30721> velocity=<-1,  3>\nposition=<-41003,  20799> velocity=< 4, -2>\nposition=< 31117,  41412> velocity=<-3, -4>\nposition=< 51717,  51716> velocity=<-5, -5>\nposition=< 20853,  51707> velocity=<-2, -5>\nposition=< 51766,  51707> velocity=<-5, -5>\nposition=< 20841, -10113> velocity=<-2,  1>\nposition=<-20371,  51714> velocity=< 2, -5>\nposition=< 10546,  31107> velocity=<-1, -3>\nposition=<-40963,  31103> velocity=< 4, -3>\nposition=<-20403, -30718> velocity=< 2,  3>\nposition=< 31141, -20420> velocity=<-3,  2>\nposition=<-20370,  41404> velocity=< 2, -4>\nposition=< 20865, -30725> velocity=<-2,  3>\nposition=< 20862,  20795> velocity=<-2, -2>\nposition=< 41445,  10492> velocity=<-4, -1>\nposition=< 51730, -51327> velocity=<-5,  5>\nposition=< 20842,  31101> velocity=<-2, -3>\nposition=<-51279,  51708> velocity=< 5, -5>\nposition=< 31121,  51712> velocity=<-3, -5>\nposition=< 31154, -10108> velocity=<-3,  1>\nposition=<-51275, -10115> velocity=< 5,  1>\nposition=< 31165, -20413> velocity=<-3,  2>\nposition=<-20376, -30721> velocity=< 2,  3>\nposition=<-10065,  41403> velocity=< 1, -4>\nposition=<-10107, -51325> velocity=< 1,  5>\nposition=<-20353,  41403> velocity=< 2, -4>\nposition=< 20837, -10117> velocity=<-2,  1>\nposition=< 51720,  41403> velocity=<-5, -4>\nposition=<-20363, -41024> velocity=< 2,  4>\nposition=<-30699,  31101> velocity=< 3, -3>\nposition=<-51286,  20798> velocity=< 5, -2>\nposition=<-20350,  31101> velocity=< 2, -3>\nposition=<-51310, -41027> velocity=< 5,  4>\nposition=<-51311, -51328> velocity=< 5,  5>\nposition=< 10512,  51712> velocity=<-1, -5>\nposition=<-30699, -10114> velocity=< 3,  1>\nposition=< 20818,  31105> velocity=<-2, -3>\nposition=< 41417,  41407> velocity=<-4, -4>\nposition=< 20863, -20421> velocity=<-2,  2>\nposition=< 41437,  20803> velocity=<-4, -2>\nposition=<-30699,  10500> velocity=< 3, -1>\nposition=<-51267,  31100> velocity=< 5, -3>\nposition=<-51307, -51333> velocity=< 5,  5>\nposition=< 31150, -41024> velocity=<-3,  4>\nposition=< 51719, -20421> velocity=<-5,  2>\nposition=< 31168,  51707> velocity=<-3, -5>\nposition=<-20352, -10113> velocity=< 2,  1>\nposition=<-20398,  20804> velocity=< 2, -2>\nposition=< 51743, -51324> velocity=<-5,  5>\nposition=< 20857,  51707> velocity=<-2, -5>\nposition=< 51774,  41403> velocity=<-5, -4>\nposition=<-10107, -20420> velocity=< 1,  2>\nposition=<-20363, -20417> velocity=< 2,  2>\nposition=< 31144,  41403> velocity=<-3, -4>\nposition=<-20355, -20414> velocity=< 2,  2>\nposition=<-10075,  51710> velocity=< 1, -5>\nposition=< 41426,  10494> velocity=<-4, -1>\nposition=<-20363, -30717> velocity=< 2,  3>\nposition=< 20837, -51324> velocity=<-2,  5>\nposition=< 10535, -10113> velocity=<-1,  1>\nposition=<-41000, -41024> velocity=< 4,  4>\nposition=< 10552,  51707> velocity=<-1, -5>\nposition=< 20864, -30725> velocity=<-2,  3>\nposition=< 10528, -10108> velocity=<-1,  1>\nposition=<-30694, -10113> velocity=< 3,  1>\nposition=< 51736, -10112> velocity=<-5,  1>\nposition=< 10510, -10116> velocity=<-1,  1>\nposition=< 51768, -41025> velocity=<-5,  4>\nposition=< 41469,  10494> velocity=<-4, -1>\nposition=< 41453, -20418> velocity=<-4,  2>\nposition=<-20371, -20419> velocity=< 2,  2>\nposition=<-40987,  10495> velocity=< 4, -1>\nposition=< 10533, -10115> velocity=<-1,  1>\nposition=<-40998, -20421> velocity=< 4,  2>\nposition=< 20833,  41412> velocity=<-2, -4>\nposition=< 10518,  51709> velocity=<-1, -5>\nposition=<-30654,  51716> velocity=< 3, -5>\nposition=< 51754, -20418> velocity=<-5,  2>\nposition=<-30674, -41028> velocity=< 3,  4>\nposition=< 10541,  10500> velocity=<-1, -1>\nposition=<-10047,  20795> velocity=< 1, -2>\nposition=< 41463,  31099> velocity=<-4, -3>\nposition=< 51733, -51328> velocity=<-5,  5>\nposition=<-41019, -10114> velocity=< 4,  1>\nposition=< 41439, -30716> velocity=<-4,  3>\nposition=< 20826,  51714> velocity=<-2, -5>\nposition=< 41437,  41411> velocity=<-4, -4>\nposition=<-30667, -41029> velocity=< 3,  4>\nposition=< 41429,  20803> velocity=<-4, -2>\nposition=< 41469,  10493> velocity=<-4, -1>\nposition=< 51736,  41409> velocity=<-5, -4>\nposition=< 31168, -51328> velocity=<-3,  5>\nposition=<-30715,  20795> velocity=< 3, -2>\nposition=<-30715, -30723> velocity=< 3,  3>\nposition=< 20816,  41408> velocity=<-2, -4>\nposition=<-30702, -51330> velocity=< 3,  5>\nposition=< 51762,  41410> velocity=<-5, -4>\nposition=<-30659, -51329> velocity=< 3,  5>\nposition=< 51759,  51712> velocity=<-5, -5>\nposition=< 10525, -41025> velocity=<-1,  4>\nposition=< 51738, -20418> velocity=<-5,  2>\nposition=<-30715, -51329> velocity=< 3,  5>\nposition=<-30683, -41025> velocity=< 3,  4>\nposition=< 31159, -20421> velocity=<-3,  2>\nposition=< 20861, -10117> velocity=<-2,  1>\nposition=<-20387,  31105> velocity=< 2, -3>\nposition=<-51302,  10497> velocity=< 5, -1>\nposition=< 51778, -30723> velocity=<-5,  3>\nposition=< 41425, -20416> velocity=<-4,  2>\nposition=< 10538,  41405> velocity=<-1, -4>\nposition=<-10051,  20804> velocity=< 1, -2>\nposition=<-40963, -20416> velocity=< 4,  2>\nposition=<-51302, -51331> velocity=< 5,  5>\nposition=< 41455,  10491> velocity=<-4, -1>\nposition=<-20371, -51328> velocity=< 2,  5>\nposition=<-10075,  20800> velocity=< 1, -2>\nposition=<-51263,  41410> velocity=< 5, -4>\nposition=<-30704, -51328> velocity=< 3,  5>\nposition=< 51766,  20799> velocity=<-5, -2>\nposition=< 20841,  41403> velocity=<-2, -4>\nposition=<-30711, -51329> velocity=< 3,  5>\nposition=< 10537, -30721> velocity=<-1,  3>\nposition=< 10557,  51712> velocity=<-1, -5>\nposition=< 51728, -10117> velocity=<-5,  1>\nposition=< 20866, -10114> velocity=<-2,  1>\nposition=< 20818,  20801> velocity=<-2, -2>\nposition=< 41461, -51330> velocity=<-4,  5>\nposition=<-10064,  10491> velocity=< 1, -1>\nposition=<-10083, -51328> velocity=< 1,  5>\nposition=<-10107, -20421> velocity=< 1,  2>\nposition=< 10502, -41029> velocity=<-1,  4>\nposition=<-51283,  20803> velocity=< 5, -2>\nposition=< 41437, -10108> velocity=<-4,  1>\nposition=<-30667, -20414> velocity=< 3,  2>\nposition=< 41469,  31101> velocity=<-4, -3>\nposition=<-51304,  20801> velocity=< 5, -2>\nposition=< 51730,  10500> velocity=<-5, -1>\nposition=<-10102,  10494> velocity=< 1, -1>\nposition=<-51262,  41412> velocity=< 5, -4>\nposition=<-41015, -51333> velocity=< 4,  5>\nposition=<-40971, -30724> velocity=< 4,  3>\nposition=< 51765, -10108> velocity=<-5,  1>\nposition=<-10094,  31103> velocity=< 1, -3>\nposition=< 10541,  20797> velocity=<-1, -2>\nposition=< 20845, -30720> velocity=<-2,  3>\nposition=< 31113,  10495> velocity=<-3, -1>\nposition=<-20387, -30720> velocity=< 2,  3>\nposition=<-20403, -30721> velocity=< 2,  3>\nposition=< 41429, -41029> velocity=<-4,  4>\nposition=< 10517,  10500> velocity=<-1, -1>\nposition=< 51722, -20420> velocity=<-5,  2>\nposition=< 41445, -10117> velocity=<-4,  1>\nposition=< 51730,  41405> velocity=<-5, -4>\nposition=< 31141,  31102> velocity=<-3, -3>\nposition=< 51774,  41403> velocity=<-5, -4>\nposition=< 20849, -20416> velocity=<-2,  2>\nposition=<-20361, -20421> velocity=< 2,  2>\nposition=< 10553,  10495> velocity=<-1, -1>\nposition=<-10064,  20795> velocity=< 1, -2>\nposition=< 31109,  20797> velocity=<-3, -2>\nposition=<-30696,  10496> velocity=< 3, -1>\nposition=< 41418, -20420> velocity=<-4,  2>\nposition=<-20410, -10117> velocity=< 2,  1>\nposition=< 10558,  10495> velocity=<-1, -1>\nposition=< 20805,  41409> velocity=<-2, -4>\nposition=< 10509, -41026> velocity=<-1,  4>\nposition=< 10553,  41403> velocity=<-1, -4>\nposition=<-30654,  41411> velocity=< 3, -4>\nposition=<-40976,  10496> velocity=< 4, -1>\nposition=<-10099, -41027> velocity=< 1,  4>\nposition=< 10501, -10114> velocity=<-1,  1>\nposition=< 10559,  51711> velocity=<-1, -5>\nposition=< 41474,  51710> velocity=<-4, -5>\nposition=<-51303, -51326> velocity=< 5,  5>\nposition=<-30656, -10112> velocity=< 3,  1>\nposition=< 51768,  41407> velocity=<-5, -4>\nposition=< 51741, -41020> velocity=<-5,  4>\nposition=<-10094, -51325> velocity=< 1,  5>\nposition=<-30699,  31106> velocity=< 3, -3>\nposition=< 51741, -10112> velocity=<-5,  1>\nposition=< 41434, -30724> velocity=<-4,  3>\nposition=< 41450, -30722> velocity=<-4,  3>\nposition=< 20853, -51328> velocity=<-2,  5>\nposition=< 31149, -51329> velocity=<-3,  5>\nposition=<-10051,  51712> velocity=< 1, -5>\nposition=< 20837,  51709> velocity=<-2, -5>\nposition=< 41437, -41022> velocity=<-4,  4>\nposition=<-41019, -10110> velocity=< 4,  1>\nposition=<-20398,  51714> velocity=< 2, -5>\nposition=<-20387,  10491> velocity=< 2, -1>\nposition=< 10525,  31108> velocity=<-1, -3>\nposition=<-40966,  51710> velocity=< 4, -5>\nposition=<-10090,  10493> velocity=< 1, -1>\nposition=< 10557, -51327> velocity=<-1,  5>\nposition=<-51275,  10491> velocity=< 5, -1>\nposition=<-30673, -51333> velocity=< 3,  5>\nposition=<-10107, -20413> velocity=< 1,  2>\nposition=<-10094,  51711> velocity=< 1, -5>\nposition=<-40958,  51708> velocity=< 4, -5>\nposition=< 31130,  41404> velocity=<-3, -4>\nposition=<-10055, -51329> velocity=< 1,  5>\nposition=< 51737,  41411> velocity=<-5, -4>\nposition=< 20822, -30723> velocity=<-2,  3>\nposition=< 31137,  20804> velocity=<-3, -2>\nposition=< 20818,  31104> velocity=<-2, -3>\nposition=< 41458, -20419> velocity=<-4,  2>\nposition=< 41434, -30718> velocity=<-4,  3>\nposition=<-51318, -41027> velocity=< 5,  4>\nposition=< 41416,  51707> velocity=<-4, -5>\nposition=<-51275,  31102> velocity=< 5, -3>\nposition=< 20845, -30719> velocity=<-2,  3>\nposition=< 10546,  20801> velocity=<-1, -2>\nposition=< 20826,  51716> velocity=<-2, -5>\nposition=<-41019, -41021> velocity=< 4,  4>\nposition=< 31152, -10112> velocity=<-3,  1>\nposition=< 10557,  31101> velocity=<-1, -3>\nposition=< 41458,  41407> velocity=<-4, -4>\nposition=< 41429,  10496> velocity=<-4, -1>\nposition=<-30659, -10108> velocity=< 3,  1>\nposition=< 51767,  41407> velocity=<-5, -4>\nposition=< 51752, -41025> velocity=<-5,  4>\nposition=<-41017,  31099> velocity=< 4, -3>\nposition=< 10534, -51329> velocity=<-1,  5>\nposition=<-10075, -20418> velocity=< 1,  2>\nposition=< 41423, -10112> velocity=<-4,  1>\nposition=<-51286,  10492> velocity=< 5, -1>\nposition=<-51315,  20800> velocity=< 5, -2>\nposition=< 20850,  51715> velocity=<-2, -5>\nposition=<-20398, -51325> velocity=< 2,  5>\nposition=< 51776, -41024> velocity=<-5,  4>\nposition=<-30667,  51713> velocity=< 3, -5>\nposition=< 10561, -30719> velocity=<-1,  3>\nposition=< 10512, -41029> velocity=<-1,  4>\nposition=< 31169, -30718> velocity=<-3,  3>\nposition=< 51722,  51709> velocity=<-5, -5>\nposition=<-51315,  41412> velocity=< 5, -4>\nposition=<-51299, -41028> velocity=< 5,  4>\nposition=< 20826,  41408> velocity=<-2, -4>\nposition=<-20371, -10114> velocity=< 2,  1>\nposition=< 41429,  41405> velocity=<-4, -4>\nposition=< 20853, -51328> velocity=<-2,  5>\nposition=<-51286,  20796> velocity=< 5, -2>\nposition=<-51291,  10496> velocity=< 5, -1>\nposition=< 20826, -20413> velocity=<-2,  2>\nposition=< 20845,  20798> velocity=<-2, -2>\nposition=<-10048, -10113> velocity=< 1,  1>\nposition=<-10099, -30717> velocity=< 1,  3>\nposition=<-41009, -20421> velocity=< 4,  2>\nposition=< 31110,  41407> velocity=<-3, -4>\nposition=< 20861, -51326> velocity=<-2,  5>\nposition=< 20826, -20413> velocity=<-2,  2>\nposition=<-10055,  31099> velocity=< 1, -3>\nposition=< 20837, -51325> velocity=<-2,  5>\nposition=< 20866,  51710> velocity=<-2, -5>\nposition=< 20858, -20420> velocity=<-2,  2>\nposition=< 31130, -51332> velocity=<-3,  5>\nposition=<-10074, -51333> velocity=< 1,  5>\nposition=< 20813,  10495> velocity=<-2, -1>\nposition=< 31162, -51331> velocity=<-3,  5>\nposition=<-30698,  51708> velocity=< 3, -5>`;\n\nexport default data;\n","const data = '1955';\n\nexport default data;\n","const data = `initial state: #.#.#..##.#....#.#.##..##.##..#..#...##....###..#......###.#..#.....#.###.#...#####.####...#####.#.#\n\n..#.. => .\n#...# => .\n.#... => #\n#.##. => .\n..#.# => #\n#.#.# => .\n###.. => #\n###.# => #\n..... => .\n....# => .\n.##.. => #\n##### => .\n####. => .\n..##. => .\n##.#. => #\n.#..# => #\n##..# => .\n.##.# => .\n.#### => #\n..### => .\n...## => #\n#..## => #\n#.... => .\n##.## => .\n#.#.. => .\n##... => .\n.#.## => #\n.###. => #\n...#. => .\n#.### => .\n#..#. => #\n.#.#. => .`;\n\nexport default data;\n","const emojis = [\n  '😀',\n  '😍',\n  '😘',\n  '😫',\n  '😖',\n  '🤭',\n  '😨',\n  '👩',\n  '🔬',\n  '🧙‍',\n  '🧜',\n  '🙎',\n  '🧙',\n  '🦁',\n  '🦋',\n  '🌲',\n  '🐴',\n  '🐳',\n  '🐓',\n  '🦃',\n  '🐒',\n  '🐘',\n  '🌒',\n  '🏓',\n  '🍚',\n  '🍺',\n  '🥔',\n  '🍳',\n  '🍒',\n  '🤼',\n  '🥈',\n  '🎪',\n  '🥊',\n  '🥉',\n  '🏆',\n  '🚵',\n  '🏋',\n  '🎾',\n  '🏓',\n  '🎢',\n  '🚏',\n  '🛩',\n  '🗿',\n  '🏘',\n  '🚧',\n  '🚄',\n  '🏕',\n  '🚋',\n  '🔩',\n  '🛌',\n  '⚖',\n  '💌',\n  '📯',\n  '📚',\n  '⚔',\n  '🗡',\n  '🔪',\n  '🉑',\n  '🈳',\n  '🆗',\n  '❎',\n  '🈵',\n  '🚭',\n  '🇸🇹',\n  '🇷🇺',\n  '🇳🇨',\n  '🇵🇷',\n  '🇩🇲',\n  '🇳🇪',\n  '🇬🇪',\n  '🇹🇫',\n  '😮',\n  '😦',\n  '🖐',\n  '🧠',\n  '👀',\n  '👁',\n  '💁',\n  '👩',\n  '👩‍👦‍👦',\n  '👙',\n  '👗',\n  '👿',\n  '💀',\n  '💇',\n  '👩',\n  '‍‍🌞',\n  '🌈',\n  '🌪',\n  '🔥',\n  '🍟',\n  '🍆',\n  '🎱',\n  '🏎',\n  '🏩',\n  '💒',\n  '⛪',\n  '🛥',\n  '🏊',\n  '❌',\n];\n\nconst data = `158, 163\n287, 68\n76, 102\n84, 244\n162, 55\n272, 335\n345, 358\n210, 211\n343, 206\n219, 323\n260, 238\n83, 94\n137, 340\n244, 172\n335, 307\n52, 135\n312, 109\n276, 93\n288, 274\n173, 211\n125, 236\n200, 217\n339, 56\n286, 134\n310, 192\n169, 192\n313, 106\n331, 186\n40, 236\n194, 122\n244, 76\n159, 282\n161, 176\n262, 279\n184, 93\n337, 284\n346, 342\n283, 90\n279, 162\n112, 244\n49, 254\n63, 176\n268, 145\n334, 336\n278, 176\n353, 135\n282, 312\n96, 85\n90, 105\n354, 312`;\n\nexport default data;\nexport { emojis };\n","const data = `Step L must be finished before step A can begin.\nStep P must be finished before step F can begin.\nStep V must be finished before step U can begin.\nStep F must be finished before step S can begin.\nStep A must be finished before step J can begin.\nStep R must be finished before step K can begin.\nStep Z must be finished before step T can begin.\nStep G must be finished before step W can begin.\nStep H must be finished before step K can begin.\nStep T must be finished before step U can begin.\nStep K must be finished before step B can begin.\nStep C must be finished before step Y can begin.\nStep W must be finished before step N can begin.\nStep E must be finished before step M can begin.\nStep N must be finished before step J can begin.\nStep B must be finished before step S can begin.\nStep O must be finished before step D can begin.\nStep X must be finished before step D can begin.\nStep M must be finished before step Q can begin.\nStep S must be finished before step J can begin.\nStep U must be finished before step Y can begin.\nStep I must be finished before step J can begin.\nStep D must be finished before step J can begin.\nStep Q must be finished before step Y can begin.\nStep J must be finished before step Y can begin.\nStep Z must be finished before step D can begin.\nStep K must be finished before step E can begin.\nStep U must be finished before step J can begin.\nStep I must be finished before step Y can begin.\nStep A must be finished before step B can begin.\nStep B must be finished before step Q can begin.\nStep Z must be finished before step S can begin.\nStep F must be finished before step E can begin.\nStep B must be finished before step I can begin.\nStep C must be finished before step S can begin.\nStep O must be finished before step S can begin.\nStep V must be finished before step O can begin.\nStep C must be finished before step B can begin.\nStep G must be finished before step M can begin.\nStep O must be finished before step Y can begin.\nStep H must be finished before step N can begin.\nStep D must be finished before step Y can begin.\nStep Z must be finished before step O can begin.\nStep K must be finished before step W can begin.\nStep M must be finished before step Y can begin.\nStep O must be finished before step J can begin.\nStep P must be finished before step E can begin.\nStep C must be finished before step Q can begin.\nStep I must be finished before step D can begin.\nStep F must be finished before step I can begin.\nStep W must be finished before step B can begin.\nStep W must be finished before step M can begin.\nStep N must be finished before step D can begin.\nStep Z must be finished before step M can begin.\nStep M must be finished before step U can begin.\nStep R must be finished before step I can begin.\nStep S must be finished before step Y can begin.\nStep L must be finished before step B can begin.\nStep S must be finished before step D can begin.\nStep R must be finished before step G can begin.\nStep U must be finished before step D can begin.\nStep C must be finished before step N can begin.\nStep R must be finished before step T can begin.\nStep K must be finished before step U can begin.\nStep W must be finished before step E can begin.\nStep H must be finished before step E can begin.\nStep X must be finished before step M can begin.\nStep G must be finished before step I can begin.\nStep C must be finished before step U can begin.\nStep N must be finished before step B can begin.\nStep X must be finished before step S can begin.\nStep G must be finished before step H can begin.\nStep T must be finished before step X can begin.\nStep P must be finished before step N can begin.\nStep B must be finished before step Y can begin.\nStep S must be finished before step Q can begin.\nStep C must be finished before step E can begin.\nStep F must be finished before step D can begin.\nStep H must be finished before step J can begin.\nStep B must be finished before step U can begin.\nStep B must be finished before step J can begin.\nStep P must be finished before step I can begin.\nStep N must be finished before step X can begin.\nStep M must be finished before step J can begin.\nStep X must be finished before step I can begin.\nStep L must be finished before step P can begin.\nStep T must be finished before step B can begin.\nStep T must be finished before step K can begin.\nStep D must be finished before step Q can begin.\nStep W must be finished before step X can begin.\nStep A must be finished before step Y can begin.\nStep G must be finished before step D can begin.\nStep R must be finished before step Z can begin.\nStep U must be finished before step Q can begin.\nStep G must be finished before step O can begin.\nStep G must be finished before step Q can begin.\nStep G must be finished before step Y can begin.\nStep P must be finished before step Y can begin.\nStep I must be finished before step Q can begin.\nStep F must be finished before step C can begin.\nStep L must be finished before step K can begin.`;\n\nexport default data;\n","const data = '9 11 6 3 5 3 3 7 1 6 0 10 6 9 5 6 2 7 1 3 9 4 2 1 2 1 3 2 1 8 0 11 4 2 8 1 5 5 1 2 6 1 7 1 1 3 1 1 1 2 1 1 6 0 8 9 4 2 1 8 5 9 3 3 1 1 3 2 1 3 3 2 5 1 5 1 3 5 1 6 0 9 1 5 6 9 6 3 6 2 5 1 2 2 1 1 3 1 9 0 8 1 9 6 9 6 5 6 3 1 2 1 2 1 2 1 1 3 1 5 0 10 3 3 6 3 5 1 7 6 7 9 1 1 2 1 3 3 2 3 2 3 3 6 1 5 0 10 7 3 7 1 4 1 1 9 3 6 1 1 1 1 1 1 9 0 10 9 2 6 7 9 6 5 3 1 1 1 3 3 1 1 1 2 2 3 1 5 0 11 1 5 9 9 5 1 4 3 3 8 5 3 3 1 2 2 4 1 4 2 1 1 3 6 1 9 0 10 9 8 9 1 6 2 5 3 7 5 3 1 3 3 1 1 2 2 3 1 9 0 6 1 9 2 2 1 6 3 2 2 1 1 2 3 3 3 1 8 0 11 6 8 9 1 1 2 7 8 7 9 2 3 2 1 3 2 1 2 1 2 3 4 2 2 1 3 5 1 9 0 7 5 1 1 4 8 1 9 1 2 2 3 2 3 1 1 1 1 6 0 9 6 8 4 7 5 7 6 8 1 2 3 2 1 3 1 1 5 0 7 5 1 9 5 8 1 4 1 2 3 3 1 4 5 5 3 1 6 4 4 5 5 3 7 1 6 0 11 7 1 2 7 2 9 4 1 6 4 5 2 1 3 3 1 1 1 9 0 9 7 2 9 8 2 3 1 4 9 1 1 3 1 3 1 2 3 1 1 8 0 7 1 3 8 2 4 6 3 1 3 1 3 2 3 3 1 4 1 3 2 2 3 4 3 4 1 6 0 11 9 6 9 4 1 1 4 5 9 4 6 1 1 1 2 1 1 1 6 0 9 1 7 3 1 7 7 1 5 9 2 3 2 1 3 2 1 9 0 9 2 5 7 5 1 3 9 4 5 1 3 1 2 3 1 1 3 3 4 3 3 2 3 4 1 8 0 7 1 5 5 1 1 7 4 3 3 2 1 3 2 2 2 1 9 0 11 7 7 9 9 1 2 9 7 6 2 1 1 1 3 3 3 2 2 1 2 1 8 0 10 8 5 1 7 5 5 5 9 9 4 2 1 1 1 2 1 1 3 5 2 5 2 3 7 1 8 0 7 7 5 4 6 1 9 1 2 1 2 3 1 1 1 1 1 7 0 9 9 5 4 2 6 2 7 7 1 3 3 1 3 1 1 1 1 7 0 9 3 1 4 4 5 6 7 6 8 1 1 1 1 3 2 1 2 4 4 1 2 2 2 3 7 1 6 0 6 4 6 6 1 8 4 2 2 2 2 1 3 1 9 0 11 9 9 5 5 9 1 1 4 4 8 2 2 3 1 2 1 1 1 2 3 1 9 0 10 1 5 6 7 2 3 1 8 3 8 2 3 1 2 1 2 2 3 1 3 5 3 3 1 2 4 5 7 4 2 1 5 3 3 6 1 6 0 8 9 5 2 2 4 1 3 7 2 3 1 2 2 2 1 9 0 6 6 1 1 7 4 7 3 1 1 1 1 3 3 2 1 1 5 0 10 7 4 9 9 3 3 7 1 3 6 1 3 1 1 2 3 3 2 1 5 4 3 7 1 8 0 11 6 3 9 1 8 2 1 9 5 5 7 1 1 1 1 1 3 1 1 1 8 0 8 9 1 4 8 1 5 4 8 1 3 3 2 1 2 3 2 1 7 0 9 1 9 7 6 2 1 1 1 3 3 3 2 1 3 1 2 2 5 4 3 5 2 2 3 4 1 5 0 8 4 1 1 9 9 1 2 7 2 3 1 3 2 1 7 0 6 1 4 9 4 3 4 1 3 1 1 1 3 3 1 7 0 11 8 7 4 7 4 3 1 1 9 1 2 1 2 1 1 3 3 3 5 4 3 1 3 7 1 9 0 10 6 5 4 6 1 2 1 1 5 7 2 1 3 2 1 1 1 1 1 1 8 0 6 7 1 4 5 6 2 1 1 3 2 2 3 2 3 1 6 0 7 4 5 1 7 1 1 8 1 3 1 2 3 2 2 3 1 2 5 3 2 3 5 1 8 0 11 9 9 1 6 5 1 9 6 4 1 7 1 3 2 2 1 1 1 2 1 9 0 6 1 6 1 6 6 5 1 2 1 3 3 1 1 3 1 1 6 0 11 7 5 1 5 4 2 5 3 6 1 4 3 1 1 3 1 2 5 4 2 2 3 6 1 5 4 3 3 6 1 6 0 8 4 9 3 5 4 3 1 6 3 1 2 1 2 3 1 9 0 9 4 2 2 1 5 6 1 4 4 1 1 2 1 2 3 1 1 2 1 7 0 9 3 4 1 9 4 8 8 9 3 2 3 3 3 3 1 1 1 2 1 3 4 3 3 5 1 9 0 6 3 1 1 6 2 3 1 1 1 3 2 3 1 1 1 1 7 0 6 7 8 9 2 1 1 1 3 3 1 3 2 2 1 8 0 7 8 4 1 8 5 7 9 1 1 1 1 3 3 2 2 3 2 5 2 3 3 5 1 6 0 6 1 6 6 9 1 9 3 3 1 2 1 2 1 9 0 6 1 5 7 6 2 1 3 1 3 2 1 2 1 1 1 1 7 0 9 9 6 2 3 4 9 1 7 2 1 3 3 1 1 2 2 3 1 1 4 2 3 7 1 5 0 9 7 6 8 8 6 9 1 3 7 2 1 3 1 1 1 6 0 7 4 6 1 3 6 3 9 3 1 3 3 1 2 1 7 0 10 1 4 1 4 1 8 5 2 1 3 3 3 2 1 3 1 3 2 3 2 5 2 2 3 6 1 2 5 3 3 4 1 9 0 9 7 5 9 2 7 6 7 1 3 2 2 1 2 1 3 2 3 2 1 8 0 9 1 5 2 7 1 3 6 4 2 3 2 1 2 1 1 1 1 1 5 0 6 2 1 5 6 1 1 1 3 2 1 3 2 3 1 4 3 7 1 6 0 11 3 2 1 4 4 2 1 4 1 1 3 3 1 3 1 3 1 1 5 0 11 3 5 1 8 3 6 7 9 5 1 9 2 2 1 1 1 1 6 0 6 2 5 4 4 1 3 3 1 1 3 3 1 2 1 3 4 3 1 5 3 7 1 8 0 6 8 5 1 7 1 6 1 1 3 3 1 1 3 2 1 9 0 7 5 1 8 8 1 2 6 2 1 1 1 1 1 3 3 1 1 6 0 11 1 1 9 5 7 9 4 7 3 1 7 1 2 1 2 3 1 5 3 3 2 3 4 3 3 6 1 9 0 6 4 6 9 8 6 1 2 1 1 2 2 3 3 3 1 1 6 0 6 7 1 4 8 1 3 2 2 1 1 1 1 1 7 0 7 2 4 1 7 3 2 3 3 3 1 2 3 1 2 4 2 5 2 1 3 3 4 1 9 0 7 5 6 1 1 5 8 1 3 1 2 1 1 1 1 2 1 1 9 0 6 6 1 6 4 4 3 3 3 1 1 2 1 3 3 2 1 7 0 8 3 7 1 7 7 3 7 4 2 1 1 3 1 3 2 2 5 4 1 3 4 6 5 4 3 5 1 5 0 8 8 1 1 4 2 3 9 5 2 2 2 1 2 1 9 0 8 9 6 5 5 8 2 1 8 3 1 1 2 2 1 1 3 3 1 7 0 11 3 9 9 8 5 6 1 1 7 8 1 2 3 1 2 3 3 1 2 5 5 3 2 3 7 1 7 0 10 9 9 4 8 2 7 2 3 1 9 1 3 1 1 3 1 2 1 7 0 6 1 3 1 4 4 2 2 3 1 3 3 1 3 1 9 0 8 4 9 1 1 8 1 9 1 1 1 2 3 1 3 1 1 1 2 2 3 3 5 2 1 3 7 1 6 0 9 1 5 9 3 5 4 3 7 8 3 3 2 3 2 1 1 6 0 6 1 1 7 1 7 8 3 3 1 2 2 1 1 6 0 7 2 1 8 8 6 7 4 3 1 1 3 2 2 5 3 4 1 1 5 3 3 4 1 7 0 6 5 6 8 2 1 6 1 3 1 1 3 2 2 1 5 0 11 9 1 5 4 3 5 3 4 1 9 7 1 3 3 3 1 1 7 0 11 3 6 5 3 7 4 1 8 1 7 1 2 1 3 3 1 3 1 3 2 1 1 3 7 1 7 0 7 1 8 8 5 3 9 7 3 1 1 3 1 3 2 1 6 0 8 2 7 1 9 8 9 1 9 2 3 1 1 1 3 1 9 0 9 1 5 1 4 6 2 5 3 2 1 1 1 1 2 1 1 3 1 4 3 3 1 4 3 5 2 1 6 2 3 5 1 6 2 5 4 3 6 1 7 0 8 1 7 7 6 1 4 8 1 1 1 3 3 3 1 1 1 6 0 7 5 9 8 1 6 4 2 1 1 3 2 3 3 1 7 0 10 1 1 4 2 8 2 6 7 8 5 3 3 2 1 3 1 3 1 2 3 3 3 5 3 6 1 9 0 9 9 5 7 5 9 2 5 4 1 2 1 3 2 3 1 2 3 3 1 8 0 9 1 5 9 6 5 7 9 1 1 3 1 2 1 2 1 1 1 1 9 0 7 2 9 3 1 1 1 4 3 3 1 2 1 1 1 1 1 2 1 5 5 3 5 3 6 1 7 0 11 3 8 5 2 1 2 8 8 5 9 3 3 2 3 1 1 3 3 1 5 0 11 3 4 1 3 2 1 3 6 5 1 3 3 1 3 3 2 1 9 0 7 9 4 8 7 6 1 6 1 1 2 1 3 1 1 1 2 3 2 5 2 3 3 3 5 1 8 0 6 3 8 1 7 7 2 2 3 2 2 3 1 3 2 1 9 0 10 9 4 9 6 1 9 9 8 7 3 3 2 1 1 1 3 1 3 2 1 9 0 10 7 8 4 6 5 1 1 7 9 6 1 3 2 1 2 2 1 2 3 1 1 1 4 2 3 6 1 6 0 8 2 6 3 7 1 1 8 1 2 3 3 2 1 1 1 5 0 8 1 1 7 4 3 1 3 4 2 3 3 3 1 1 7 0 8 3 7 2 8 2 7 8 1 3 1 3 2 3 2 2 3 3 1 1 3 1 3 1 1 3 5 3 3 7 1 7 0 10 1 9 9 1 7 9 5 8 6 3 1 2 2 1 1 3 3 1 9 0 8 6 5 2 1 9 3 6 6 1 2 3 2 1 3 2 1 2 1 9 0 7 1 9 8 4 8 9 3 1 2 3 2 1 2 1 2 2 4 4 3 3 5 1 3 3 6 1 8 0 7 1 8 8 1 7 5 2 3 2 1 1 3 3 1 1 1 5 0 10 1 4 5 9 5 3 3 7 3 2 1 3 3 2 1 1 9 0 9 5 4 1 4 9 3 4 4 9 2 3 1 3 2 1 1 2 3 1 4 1 1 2 3 3 4 1 6 0 10 1 6 6 1 1 2 3 9 6 6 2 2 1 2 1 3 1 7 0 10 4 6 3 5 1 3 1 9 1 1 2 3 1 1 2 1 1 1 6 0 6 3 1 5 7 1 1 2 1 2 1 1 2 5 1 5 4 3 5 1 6 0 10 1 1 8 2 9 4 2 1 5 7 1 2 1 1 1 3 1 7 0 8 2 9 5 7 5 1 4 3 1 2 2 3 1 3 1 1 6 0 8 3 9 2 9 1 6 3 4 3 2 1 1 3 1 1 2 1 4 1 3 7 1 6 0 11 2 6 1 7 3 3 3 7 7 8 4 2 1 1 3 3 3 1 5 0 6 4 5 4 1 4 9 1 2 3 3 1 1 5 0 7 8 4 4 3 1 1 8 3 1 3 3 2 3 3 1 3 2 5 5 2 1 4 5 5 3 7 1 5 0 10 9 7 1 5 7 1 6 3 2 4 3 1 3 2 1 1 8 0 7 4 9 7 1 5 8 8 3 1 1 1 1 1 2 1 1 8 0 6 9 8 6 2 4 1 1 2 3 3 1 1 1 3 2 5 3 5 2 5 1 3 4 1 8 0 8 7 1 3 2 1 5 1 3 2 2 3 1 3 1 3 3 1 7 0 10 1 4 2 7 5 2 7 5 6 4 3 1 2 1 1 2 2 1 8 0 8 9 1 3 3 1 9 1 3 1 3 2 3 1 1 2 1 1 3 3 1 3 4 1 6 0 8 2 4 4 9 4 1 6 8 1 3 3 1 2 3 1 5 0 9 6 9 8 1 1 3 2 6 5 2 3 3 2 1 1 7 0 7 5 1 5 4 8 6 4 1 1 1 2 2 3 3 1 5 5 1 3 7 1 8 0 6 1 2 3 1 9 8 1 3 3 1 2 2 1 3 1 7 0 10 8 9 4 8 4 1 1 5 1 4 2 1 2 1 3 2 2 1 8 0 10 2 4 2 3 8 3 3 7 1 8 3 2 1 1 3 2 1 2 4 5 1 2 5 2 3 3 5 1 5 0 6 5 1 4 7 2 4 1 3 1 1 2 1 9 0 10 4 4 9 5 8 6 1 9 2 8 3 3 3 2 3 2 1 1 2 1 9 0 11 5 7 3 7 1 4 2 2 2 3 9 1 2 3 2 1 1 2 1 1 2 4 2 2 4 2 1 5 1 7 4 5 3 5 1 8 0 11 7 9 2 3 6 8 1 3 8 3 6 1 1 1 2 1 2 1 3 1 7 0 10 8 9 1 9 1 7 7 8 7 3 3 2 1 1 1 1 3 1 8 0 11 3 7 5 5 4 1 4 5 6 7 8 1 3 3 1 2 2 2 3 2 1 2 1 3 3 4 1 8 0 9 9 4 5 1 2 2 3 2 6 3 2 2 1 1 2 1 3 1 7 0 6 1 1 7 2 8 4 3 1 3 2 1 2 3 1 8 0 9 1 7 3 2 2 3 1 1 6 2 1 3 1 2 1 1 2 4 1 1 3 3 4 1 7 0 6 1 8 1 1 5 6 3 2 2 2 3 1 1 1 6 0 8 6 1 5 9 5 4 3 6 2 2 3 3 2 1 1 6 0 6 5 1 1 1 1 9 2 3 3 3 1 3 2 5 3 1 3 5 1 7 0 11 2 1 1 2 8 2 3 7 5 5 3 2 2 2 2 2 2 1 1 5 0 10 8 9 2 6 9 1 8 3 9 9 2 3 1 3 1 1 8 0 10 3 9 3 9 6 1 2 5 4 1 2 2 1 2 1 3 1 3 4 3 5 2 4 4 6 5 2 6 5 4 3 5 1 5 0 7 5 1 7 9 2 8 7 1 1 2 3 2 1 6 0 6 1 4 6 3 1 7 1 1 1 3 1 1 1 7 0 6 3 8 7 2 9 1 3 1 3 1 1 3 3 3 3 5 2 5 3 6 1 8 0 7 9 1 8 1 9 8 8 1 3 2 3 3 1 1 2 1 9 0 7 3 1 7 6 5 2 1 1 3 1 3 1 3 3 1 3 1 7 0 7 3 4 1 6 9 3 3 3 3 3 3 1 2 2 3 2 4 4 5 3 3 7 1 9 0 7 1 6 3 5 2 1 6 1 2 1 1 3 1 3 3 3 1 6 0 8 2 9 1 5 5 2 1 4 2 2 1 2 2 3 1 6 0 8 1 1 3 4 4 4 1 3 1 1 2 1 2 3 2 4 1 2 5 3 3 3 5 1 9 0 8 4 1 7 6 3 1 1 3 1 1 3 1 1 1 1 1 1 1 9 0 9 3 8 2 1 7 4 1 6 3 1 3 2 1 2 2 1 1 3 1 8 0 8 5 2 2 3 9 2 6 1 1 2 1 2 2 2 1 3 5 2 4 4 1 3 5 1 9 0 7 4 6 1 3 9 4 6 1 2 3 1 2 1 1 2 3 1 6 0 7 7 2 2 1 5 1 7 2 1 2 3 3 1 1 5 0 8 1 5 8 1 5 4 4 7 2 1 1 2 1 1 2 1 2 3 4 2 7 7 5 4 3 5 1 6 0 7 3 8 1 8 9 9 4 3 1 1 1 1 3 1 8 0 10 4 1 1 2 8 8 8 5 7 9 1 2 3 2 1 1 2 3 1 7 0 11 8 4 8 2 2 4 3 8 5 5 1 3 1 3 1 1 3 1 4 3 5 5 2 3 6 1 7 0 7 6 1 2 7 7 4 2 3 2 1 1 3 3 1 1 5 0 6 8 1 1 7 1 6 1 3 2 1 1 1 8 0 7 2 1 8 5 7 7 6 3 3 2 2 1 1 2 2 2 4 4 1 3 1 3 4 1 6 0 11 8 3 8 7 1 3 2 4 4 2 1 3 3 1 3 2 3 1 7 0 11 5 6 2 4 2 4 8 3 2 1 2 1 1 1 2 3 3 2 1 9 0 7 3 3 7 1 5 2 1 1 3 2 2 2 3 1 1 3 5 2 5 1 3 5 1 5 0 11 4 2 8 5 8 2 8 7 1 1 1 3 2 1 3 2 1 6 0 11 4 7 2 6 1 8 2 1 3 9 1 3 1 3 1 3 1 1 6 0 8 3 1 8 3 1 7 5 5 2 1 1 2 1 1 1 1 1 5 2 3 7 1 8 0 7 8 1 2 1 1 5 5 3 1 1 3 3 1 1 3 1 6 0 9 6 9 6 1 2 1 1 4 5 1 1 3 1 1 1 1 6 0 10 7 1 4 1 5 9 7 4 2 1 1 1 2 2 3 1 5 2 5 1 2 2 1 2 1 2 5 5 2 6 3 5 3 3 6 1 6 0 6 9 7 3 7 1 3 1 3 2 1 1 3 1 9 0 11 3 4 1 4 4 5 5 7 8 5 4 1 1 3 1 2 2 2 2 2 1 6 0 6 1 7 1 2 7 8 1 2 2 3 1 1 5 4 2 4 3 4 3 6 1 7 0 10 8 3 1 2 9 6 2 4 2 5 1 3 1 1 3 2 3 1 7 0 10 9 6 3 8 9 2 1 8 8 2 2 2 3 1 1 2 1 1 7 0 8 1 7 2 8 4 9 1 6 2 1 2 1 2 1 1 3 3 2 2 1 4 3 6 1 7 0 9 5 4 7 6 2 5 7 8 1 3 2 1 1 2 1 1 1 5 0 9 8 6 9 3 6 6 4 1 1 1 1 1 2 3 1 8 0 7 6 7 4 1 8 8 1 3 1 2 2 1 1 1 3 4 3 3 5 3 3 3 5 1 6 0 8 8 1 8 7 7 8 3 8 1 2 3 1 3 2 1 6 0 11 5 7 8 4 3 1 5 7 1 9 7 3 3 1 3 2 1 1 5 0 7 3 1 4 4 1 1 5 2 2 3 1 1 2 2 3 1 1 3 5 1 5 0 6 4 7 7 3 1 3 3 1 1 1 3 1 7 0 7 7 9 3 5 1 3 1 3 3 3 2 1 3 3 1 9 0 10 2 1 6 1 1 6 9 3 4 8 3 2 3 1 3 1 2 3 1 4 1 1 3 5 2 6 6 4 5 3 5 1 5 0 9 2 1 6 7 3 3 7 3 7 2 2 1 1 2 1 5 0 6 4 1 9 2 1 7 1 2 1 2 3 1 6 0 11 2 1 5 2 1 3 6 9 7 2 3 2 1 3 1 1 1 3 2 4 4 3 3 6 1 6 0 8 6 1 2 9 1 7 6 1 3 2 3 1 3 1 1 9 0 11 6 8 1 9 4 6 6 9 5 1 8 3 2 1 3 2 1 1 2 3 1 9 0 9 8 4 9 4 3 3 1 6 2 2 2 2 1 2 1 2 3 1 5 5 5 5 1 4 3 7 1 9 0 8 1 4 3 3 7 3 8 5 3 2 1 1 1 1 3 1 1 1 7 0 8 5 6 2 1 5 5 3 9 1 2 1 1 1 3 2 1 7 0 7 3 1 1 7 6 9 1 2 1 1 1 3 2 3 3 3 4 5 3 3 4 3 4 1 7 0 6 8 5 1 1 6 7 1 1 3 1 1 2 3 1 6 0 11 3 6 9 1 1 8 2 2 1 7 2 1 1 1 1 3 3 1 9 0 7 8 5 1 1 1 7 3 1 1 2 1 1 1 1 2 3 4 1 4 3 1 2 5 3 2 4 4 3 7 1 7 0 8 1 5 9 4 9 1 2 1 1 2 1 1 3 1 1 1 5 0 8 5 4 6 2 6 5 1 1 1 1 1 2 1 1 6 0 6 1 8 1 1 8 2 1 1 2 2 1 1 3 3 4 5 2 2 3 3 6 1 5 0 7 6 9 8 8 1 8 2 3 3 1 3 1 1 8 0 11 6 6 2 7 1 3 8 6 5 5 9 1 2 3 2 1 3 2 3 1 8 0 7 9 1 7 2 1 2 5 2 2 1 3 3 2 3 1 3 4 5 3 3 4 3 6 1 6 0 9 1 3 3 8 3 8 2 9 5 2 3 1 1 1 2 1 7 0 8 2 6 1 5 6 3 9 7 3 3 1 2 1 1 3 1 7 0 10 9 1 2 2 8 1 8 7 5 5 2 3 1 1 2 3 1 4 3 1 3 2 2 3 4 1 8 0 10 4 4 1 6 1 8 4 9 9 9 1 1 1 3 1 3 2 2 1 6 0 6 4 3 1 6 5 1 3 3 1 2 2 3 1 9 0 6 1 7 6 4 8 8 1 2 2 1 2 1 3 1 3 4 3 3 3 4 3 4 6 5 5 3 4 1 5 0 10 3 5 1 5 7 1 1 9 1 7 2 3 3 1 3 1 9 0 10 4 7 8 1 7 5 8 4 7 9 3 2 2 1 1 2 3 1 1 1 5 0 11 1 1 7 4 3 4 5 8 1 4 6 2 1 1 3 3 4 5 2 2 3 6 1 6 0 8 1 2 9 5 4 4 3 3 2 3 1 3 3 2 1 5 0 9 1 3 5 1 5 4 7 7 4 1 1 1 2 3 1 8 0 6 6 4 3 4 1 7 1 1 1 3 3 2 1 3 5 3 4 5 2 2 3 6 1 9 0 11 1 6 1 1 3 6 5 1 9 9 7 1 1 3 1 1 3 3 1 3 1 5 0 10 8 6 6 5 5 2 6 1 1 2 1 1 2 1 2 1 5 0 8 2 5 1 3 1 7 9 5 2 3 3 1 1 5 4 1 5 4 2 3 5 1 5 0 9 5 7 6 1 6 9 2 3 9 1 2 1 1 2 1 7 0 6 7 3 1 4 1 2 1 1 1 3 2 1 3 1 6 0 9 4 3 1 8 2 1 5 3 6 3 1 3 1 1 3 3 4 1 3 5 3 7 1 7 0 9 1 5 3 3 1 6 7 3 8 1 2 1 3 3 2 1 1 6 0 8 2 1 4 1 9 2 1 5 1 1 2 3 3 1 1 7 0 11 7 1 5 8 5 9 1 6 1 1 5 1 1 1 3 2 1 1 2 4 3 4 1 2 3 6 7 2 6 3 5 3 3 6 1 9 0 9 2 1 4 1 1 9 8 7 7 2 2 1 3 3 2 3 1 2 1 9 0 6 5 6 1 7 8 9 2 1 2 2 1 1 3 2 3 1 7 0 7 3 4 4 5 7 1 3 2 3 1 2 1 3 3 5 2 4 4 3 4 3 7 1 5 0 7 1 6 7 9 9 4 1 2 2 3 1 1 1 5 0 7 6 1 5 3 8 1 5 1 1 3 1 1 1 8 0 9 4 1 7 4 7 5 8 8 8 2 2 3 3 1 1 1 3 1 2 1 3 1 2 3 3 5 1 7 0 7 6 8 3 2 9 6 1 2 2 2 1 2 3 1 1 9 0 8 3 7 3 1 5 6 7 4 2 3 2 1 2 2 3 1 2 1 6 0 6 7 7 1 8 9 5 1 1 2 2 3 2 3 3 2 2 3 3 4 1 6 0 7 9 1 5 7 8 4 5 1 1 2 1 3 1 1 7 0 9 6 5 4 9 2 5 1 6 9 2 1 1 3 1 2 3 1 9 0 8 5 6 3 2 1 2 9 7 1 1 3 3 3 2 2 2 2 4 1 1 4 3 6 1 5 0 6 6 1 8 5 2 8 3 3 1 1 3 1 8 0 9 9 2 1 4 1 7 9 2 2 2 2 1 1 2 1 1 1 1 9 0 6 1 6 2 1 5 2 2 2 2 2 1 3 1 2 1 5 1 4 4 3 3 1 1 6 5 3 3 7 1 5 0 9 3 8 1 9 3 7 1 8 9 1 2 1 2 2 1 9 0 8 3 1 2 1 4 9 6 1 3 3 2 3 1 2 1 1 3 1 8 0 10 1 9 5 7 1 4 1 1 9 4 2 1 1 1 2 2 1 1 2 5 4 1 2 1 5 3 6 1 5 0 11 9 1 6 1 7 1 1 3 1 8 5 3 1 1 1 3 1 7 0 6 3 5 9 4 8 1 1 3 1 2 2 3 1 1 7 0 10 1 3 8 7 1 5 2 1 2 8 3 1 1 1 1 1 1 3 2 3 5 1 3 3 6 1 7 0 11 9 5 1 1 6 2 1 1 6 1 9 1 1 1 2 1 1 1 1 9 0 7 4 2 3 1 4 8 8 2 2 1 3 1 1 3 3 1 1 7 0 11 9 4 5 1 5 9 6 1 7 7 4 2 3 2 1 1 1 2 3 4 2 1 5 5 3 5 1 5 0 11 4 3 7 6 7 5 1 6 8 7 4 3 2 3 1 3 1 7 0 11 1 4 7 6 9 9 7 5 6 1 8 1 1 3 1 1 1 3 1 8 0 9 2 8 2 8 3 2 5 1 4 1 1 2 3 2 2 1 3 3 5 1 2 5 3 4 1 9 0 9 6 5 3 6 3 1 1 8 7 1 3 3 3 1 1 2 1 2 1 5 0 11 1 4 6 2 5 2 3 7 5 9 6 1 2 1 1 2 1 6 0 11 5 9 3 5 9 8 7 2 1 6 1 3 1 1 1 3 3 4 5 2 2 3 5 2 8 2 5 6 2 5 4 3 4 1 8 0 6 9 6 1 2 1 3 3 1 3 3 2 3 1 1 1 9 0 10 6 4 1 7 3 8 5 8 1 9 3 2 3 1 2 1 3 3 3 1 8 0 9 6 6 3 5 1 9 1 4 4 3 3 2 2 1 1 1 2 2 4 5 3 3 6 1 8 0 6 7 1 4 4 2 8 1 3 1 1 2 1 2 3 1 8 0 8 1 7 5 3 7 3 6 2 1 3 2 3 1 3 3 2 1 7 0 10 8 7 1 1 3 1 7 6 9 4 1 2 1 3 2 3 3 4 3 5 1 4 2 3 6 1 6 0 7 1 2 1 6 2 5 8 3 2 1 1 2 3 1 6 0 11 6 7 9 2 7 1 5 3 9 9 7 1 2 1 2 3 1 1 7 0 11 3 1 8 4 8 9 7 7 5 9 9 1 1 2 1 2 3 1 3 2 1 3 1 3 3 4 1 9 0 10 4 8 5 1 9 1 1 7 5 4 3 2 2 3 3 1 1 2 2 1 9 0 6 7 7 8 1 8 7 1 2 1 2 2 2 1 1 2 1 7 0 10 2 8 9 6 7 1 5 5 4 6 1 1 1 2 1 1 1 5 3 3 2 3 4 1 5 0 7 9 1 1 6 1 3 1 1 1 2 1 1 1 5 0 6 1 2 4 3 4 4 1 1 3 3 1 1 9 0 11 9 6 6 5 7 8 1 4 1 2 8 3 2 1 3 1 2 1 3 1 1 2 1 2 1 3 2 1 4 3 3 6 1 6 0 10 1 5 7 1 1 2 6 3 1 5 2 2 1 3 2 1 1 9 0 6 1 9 6 4 6 2 1 3 3 3 1 1 2 3 1 1 5 0 9 6 6 1 2 1 6 5 1 8 1 1 3 1 1 5 2 3 3 5 2 3 5 1 9 0 11 2 1 5 5 2 5 4 3 2 1 3 3 2 2 1 3 2 1 1 2 1 7 0 9 9 6 1 8 8 9 1 4 8 1 1 1 2 1 3 2 1 7 0 6 7 1 2 3 4 7 1 3 1 1 1 1 3 2 1 2 3 5 3 5 1 6 0 9 7 1 1 5 8 1 9 4 8 2 1 3 2 1 2 1 9 0 9 1 5 6 1 6 6 9 4 4 2 1 2 1 3 1 3 1 3 1 6 0 11 6 1 5 7 9 1 3 7 6 5 1 3 3 1 3 3 3 1 1 2 5 2 3 4 1 7 0 7 7 8 6 8 1 4 1 1 1 2 2 1 2 1 1 5 0 6 3 1 9 3 9 9 3 2 3 1 1 1 5 0 11 3 9 5 1 8 4 9 9 1 4 7 3 2 3 3 1 1 1 3 4 5 1 1 5 4 3 6 1 5 0 11 2 2 3 8 8 6 6 8 1 1 4 3 1 2 2 3 1 5 0 9 6 5 2 4 5 1 3 6 6 1 1 3 3 1 1 6 0 11 4 9 7 7 2 6 1 9 6 1 7 2 1 2 2 1 2 2 2 1 4 3 4 3 4 1 7 0 6 9 4 9 2 1 7 1 1 1 3 1 3 2 1 8 0 9 4 1 9 8 6 5 2 8 1 2 3 2 3 1 3 3 1 1 7 0 7 5 1 3 4 1 4 6 2 3 1 3 3 1 1 1 5 3 1 3 4 1 7 0 7 6 1 1 6 5 1 3 1 1 1 2 2 3 2 1 5 0 6 4 1 1 8 6 3 1 3 3 3 3 1 6 0 7 5 1 5 8 4 6 5 3 3 3 1 2 3 1 4 2 2 3 4 1 6 0 10 5 2 8 6 2 1 9 1 8 8 2 3 1 2 2 1 1 5 0 6 1 8 9 3 1 6 2 1 2 1 1 1 8 0 10 7 7 7 7 8 5 1 9 1 4 1 1 3 1 2 2 1 1 5 2 3 5 3 6 1 6 0 6 1 4 6 8 8 6 3 3 3 3 3 1 1 9 0 9 7 2 6 9 1 6 2 7 7 3 2 3 3 3 3 1 3 3 1 7 0 9 5 2 1 1 5 1 3 1 7 1 1 3 3 3 3 3 2 5 2 1 5 1 1 7 1 3 5 3 3 4 1 5 0 6 1 6 4 7 2 1 2 1 1 3 1 1 7 0 10 9 4 4 9 1 3 3 8 1 7 1 3 3 1 1 3 2 1 9 0 6 7 9 5 8 1 4 1 3 1 2 3 3 1 3 1 2 3 2 1 3 5 1 7 0 8 1 1 2 8 1 9 6 2 2 1 2 1 1 2 1 1 9 0 8 3 6 1 8 4 9 9 7 3 1 3 1 2 2 1 3 2 1 5 0 10 9 2 5 1 1 1 6 3 4 6 1 1 3 3 3 2 1 4 3 3 3 5 1 5 0 6 2 5 5 1 8 6 3 3 1 2 3 1 6 0 7 3 4 8 1 3 3 3 3 2 1 2 2 1 1 7 0 8 1 8 5 1 2 5 2 9 1 2 1 3 1 3 1 3 1 3 2 2 3 7 1 5 0 11 4 2 9 2 2 6 9 1 4 1 6 3 3 1 3 1 1 6 0 6 1 4 5 5 2 9 1 3 1 3 2 1 1 5 0 9 7 6 3 9 1 2 7 1 5 3 2 1 1 2 1 2 1 1 3 3 1 3 4 1 9 0 7 7 5 4 1 1 3 5 2 2 3 1 1 1 3 1 3 1 8 0 9 1 6 9 3 1 7 3 3 5 1 1 1 1 1 1 1 1 1 6 0 10 9 4 6 9 6 7 1 7 6 1 3 1 3 2 2 1 1 3 4 3 1 2 3 4 4 3 5 1 6 0 11 5 6 1 6 9 6 9 4 2 4 4 1 3 1 1 1 3 1 5 0 7 7 4 5 9 6 1 6 2 1 3 3 2 1 5 0 8 5 3 1 5 8 1 5 7 3 1 1 3 1 4 3 5 1 5 3 5 1 5 0 9 8 7 3 6 1 3 9 1 2 1 3 3 2 1 1 9 0 6 5 9 1 2 8 5 1 1 1 1 2 1 1 2 2 1 5 0 8 6 5 3 8 6 1 1 4 2 2 3 3 1 2 1 1 5 4 3 5 1 6 0 9 2 9 1 6 9 7 4 7 1 1 2 3 2 3 2 1 8 0 10 1 2 4 7 7 7 7 1 1 3 2 2 3 1 3 1 3 3 1 5 0 10 3 1 3 8 1 5 7 9 4 1 3 2 3 1 3 3 2 2 3 2 3 5 1 9 0 10 1 2 6 9 4 5 3 1 8 4 1 1 1 1 2 2 1 2 1 1 9 0 9 1 5 8 3 5 6 1 1 6 3 3 1 1 2 1 3 1 1 1 6 0 10 8 5 1 5 9 2 7 9 8 7 3 1 3 3 2 2 4 1 1 1 5 1 3 2 2 4 5 3 6 1 9 0 11 7 6 5 5 1 1 6 6 4 1 3 3 3 2 2 1 2 3 1 3 1 9 0 7 2 6 7 1 9 2 4 2 1 3 3 3 1 2 1 1 1 8 0 8 6 1 4 6 6 1 6 5 3 1 2 1 2 2 3 1 3 1 1 2 2 2 3 7 1 9 0 6 6 7 9 1 8 7 3 2 2 1 2 1 2 3 2 1 8 0 10 8 1 5 7 8 6 5 3 8 5 1 2 3 2 3 1 2 3 1 6 0 11 1 5 6 2 1 3 1 7 9 6 9 3 1 1 1 1 2 4 4 1 2 1 1 5 3 7 1 8 0 7 1 7 1 7 7 8 7 2 1 3 1 1 3 2 1 1 5 0 7 8 3 2 1 9 1 6 2 1 3 1 2 1 6 0 6 2 5 7 9 1 6 2 3 1 1 2 1 4 5 3 5 4 1 5 3 5 1 7 0 10 1 9 5 2 4 1 2 6 6 9 3 1 1 3 1 3 1 1 8 0 11 8 2 5 6 1 1 1 9 2 1 3 2 1 3 3 1 1 2 3 1 9 0 10 7 6 2 8 1 7 5 1 8 5 1 1 3 2 3 1 2 2 1 5 1 3 5 3 6 1 1 3 3 5 1 7 2 5 3 3 6 1 7 0 6 1 3 8 3 6 4 1 1 1 2 3 3 2 1 9 0 10 3 1 3 6 9 3 7 8 5 6 3 3 1 1 1 1 2 1 2 1 9 0 8 5 6 1 1 6 1 6 5 2 1 2 3 2 3 2 3 1 2 2 4 2 4 4 3 6 1 6 0 8 7 6 9 6 5 4 1 7 3 1 1 3 1 2 1 9 0 8 5 3 4 4 1 2 4 1 2 1 1 3 1 1 1 2 2 1 6 0 8 2 7 1 4 1 7 3 5 2 1 2 1 2 3 2 3 5 1 4 4 3 4 1 6 0 10 9 1 3 1 2 2 2 6 9 1 1 3 2 1 3 1 1 9 0 8 9 5 7 1 5 1 9 1 3 2 2 2 2 2 1 3 1 1 9 0 11 1 4 8 4 1 7 1 8 8 8 8 1 1 3 2 1 3 3 2 3 3 3 3 3 3 6 1 5 0 10 5 5 8 9 1 9 9 1 1 8 3 1 1 2 1 1 5 0 8 1 8 1 7 8 9 3 7 2 1 2 2 3 1 7 0 6 1 7 6 4 5 1 1 2 3 2 3 1 2 2 5 3 3 4 4 3 5 1 9 0 10 1 4 4 1 1 6 4 1 3 8 2 2 1 1 1 3 1 2 1 1 5 0 7 3 3 1 1 1 7 7 3 1 2 1 2 1 9 0 11 1 6 6 8 4 6 2 4 7 4 2 1 3 1 2 2 1 1 1 3 3 4 2 3 2 2 3 5 4 3 3 7 1 8 0 9 4 1 3 8 7 6 1 2 7 2 3 1 2 2 2 3 2 1 5 0 11 1 4 8 2 7 7 3 5 3 1 1 3 3 1 2 2 1 7 0 11 1 9 2 1 1 9 7 5 8 6 6 3 1 3 3 2 3 1 1 4 3 3 1 4 4 3 6 1 7 0 8 3 6 1 3 9 2 5 5 1 3 3 2 3 3 2 1 6 0 6 5 4 4 9 3 1 3 1 3 1 3 2 1 7 0 7 5 6 1 9 3 4 3 3 2 3 3 1 1 2 3 2 4 1 5 2 3 6 1 5 0 9 1 9 3 5 1 1 7 8 6 1 3 1 3 1 1 5 0 8 1 1 9 3 3 6 9 1 1 1 2 3 3 1 6 0 9 6 1 3 9 4 8 1 8 1 2 1 2 1 2 1 3 5 2 4 2 3 3 4 1 6 0 9 4 1 6 9 2 1 8 5 8 2 1 1 2 1 1 1 7 0 6 9 5 1 1 1 6 1 2 2 2 3 3 1 1 9 0 10 1 6 3 1 8 7 2 2 3 1 2 2 2 3 1 1 2 2 2 2 2 3 3 4 4 2 5 3 3 4 1 7 0 6 6 7 1 2 7 9 3 1 2 1 3 3 1 1 8 0 6 5 1 4 1 8 5 2 3 2 3 1 2 3 1 1 9 0 8 7 7 3 6 1 8 7 5 1 2 3 2 1 3 1 1 2 2 5 1 1 3 5 1 5 0 11 6 3 1 4 7 6 4 8 8 1 5 3 1 3 1 2 1 8 0 8 7 2 2 9 4 5 7 1 1 3 3 1 1 1 2 2 1 8 0 10 3 7 1 3 2 4 8 6 1 5 2 3 1 1 2 1 1 3 2 4 1 2 5 3 4 1 8 0 8 8 7 5 9 4 5 1 6 3 1 3 2 1 3 3 3 1 7 0 10 5 1 5 9 8 1 6 5 6 1 1 1 1 2 3 1 2 1 5 0 7 4 7 4 9 3 1 1 3 1 3 2 1 3 4 4 1 3 5 1 8 0 7 1 2 5 1 1 2 6 2 3 2 3 2 1 1 3 1 8 0 6 5 6 3 8 5 1 2 1 1 3 3 1 3 3 1 5 0 8 6 1 8 7 9 1 4 5 1 1 1 1 2 1 1 5 3 1 3 5 1 6 0 6 6 1 6 4 3 1 1 3 3 2 3 1 1 8 0 6 1 6 6 1 6 7 2 1 2 3 2 1 2 2 1 6 0 8 3 5 5 4 1 7 3 5 2 2 3 2 1 3 1 2 2 3 5 4 5 4 5 4 3 7 1 7 0 11 4 1 5 4 2 5 1 5 8 2 6 2 1 1 3 1 1 3 1 7 0 6 1 2 1 4 7 8 2 3 1 3 3 3 1 1 9 0 9 2 1 7 4 2 1 3 1 3 3 2 2 2 3 1 2 1 1 2 3 5 4 3 3 4 3 7 1 9 0 10 4 5 1 4 7 6 4 4 5 4 2 2 2 2 1 1 3 3 1 1 7 0 9 9 3 4 1 3 8 6 5 3 2 3 2 1 2 3 1 1 9 0 11 5 5 9 3 7 4 1 9 6 1 7 2 3 3 1 2 1 3 3 1 3 1 3 2 5 3 1 3 6 1 8 0 11 3 2 8 1 3 7 7 7 5 8 6 2 1 2 1 1 2 3 3 1 5 0 9 8 6 6 5 8 7 6 5 1 1 1 1 1 3 1 9 0 9 7 1 8 3 9 4 8 9 4 1 3 3 1 2 3 1 3 2 2 4 1 4 4 4 3 5 1 9 0 9 7 2 1 5 7 5 1 9 9 3 1 3 2 1 2 3 1 1 1 7 0 11 6 4 1 4 4 1 7 1 2 7 7 3 2 1 1 2 3 1 1 7 0 6 7 9 1 9 1 2 2 3 2 1 2 2 1 3 5 4 4 2 3 6 1 6 0 8 8 9 3 3 8 4 1 2 2 1 2 2 1 2 1 5 0 10 7 2 2 9 4 4 1 6 4 8 3 3 2 3 1 1 5 0 6 7 4 3 1 7 3 3 1 3 2 1 2 5 5 1 5 3 6 7 5 1 5 3 3 4 1 6 0 7 1 5 8 3 9 7 8 2 2 3 1 3 1 1 8 0 9 4 3 7 7 3 2 6 2 1 3 1 1 1 1 2 1 2 1 7 0 11 1 1 4 4 3 7 3 1 1 1 1 2 1 1 1 2 3 3 1 2 1 3 3 6 1 8 0 6 7 8 1 1 4 4 2 3 1 1 1 2 1 1 1 6 0 11 1 8 9 4 2 8 5 2 9 9 3 3 1 1 2 1 1 1 8 0 8 6 1 2 1 2 7 3 9 1 1 2 1 1 1 2 3 1 5 1 2 4 3 3 7 1 5 0 11 6 3 9 1 6 2 1 9 1 7 3 1 1 2 1 1 1 8 0 9 2 1 7 1 5 1 7 3 6 2 1 1 2 2 2 1 1 1 6 0 6 4 1 8 8 8 5 2 1 3 2 3 1 1 3 2 2 4 2 3 3 5 1 8 0 10 1 9 4 4 7 1 5 3 6 4 1 1 1 2 1 3 1 3 1 9 0 9 7 4 4 1 2 4 2 7 9 2 1 3 1 2 3 3 3 2 1 8 0 7 2 6 2 3 2 8 1 2 2 2 3 1 1 2 3 4 2 4 3 5 3 4 1 7 0 7 6 2 1 5 6 3 8 2 3 3 2 1 2 1 1 9 0 6 2 1 4 6 4 7 2 3 1 1 3 2 3 1 2 1 6 0 10 9 1 2 3 5 7 1 1 3 7 3 3 1 1 2 2 3 3 3 1 2 3 6 5 5 3 7 1 8 0 7 8 7 6 2 4 1 3 3 1 1 2 1 2 3 3 1 7 0 11 6 8 2 5 1 9 3 6 2 4 1 1 1 3 2 1 2 1 1 6 0 8 7 6 6 1 6 1 7 2 1 3 2 2 1 3 2 2 1 3 4 4 2 3 7 1 6 0 11 7 1 9 3 6 2 3 3 7 2 6 3 1 1 1 1 3 1 9 0 11 9 2 3 4 5 5 1 1 8 9 5 1 2 1 1 3 1 2 1 3 1 9 0 9 2 1 4 5 4 8 1 7 9 3 2 3 1 2 3 2 1 1 1 1 5 3 3 3 3 3 5 1 8 0 8 9 5 7 8 3 3 1 1 2 2 1 2 2 2 1 1 1 8 0 9 1 1 2 7 1 2 1 4 6 3 3 2 1 1 1 1 1 1 6 0 9 2 5 7 8 1 4 6 7 7 3 3 1 3 3 2 1 3 3 4 3 3 7 1 9 0 7 9 2 1 4 4 3 6 2 1 2 1 1 1 2 2 1 1 5 0 9 1 5 5 1 4 5 7 7 1 1 1 1 1 3 1 5 0 6 6 8 7 1 9 5 1 2 2 1 1 5 4 5 3 1 1 2 3 7 1 8 0 9 1 2 5 2 6 8 1 8 2 1 1 2 1 1 1 3 1 1 7 0 9 1 1 5 6 7 1 1 5 1 1 1 3 2 1 3 1 1 5 0 10 7 5 3 5 5 4 8 7 8 1 2 1 1 1 3 1 1 2 3 2 3 5 5 5 6 2 4 5 3 3 4 1 9 0 11 8 9 6 4 1 8 1 1 3 2 7 2 2 1 1 2 3 1 2 1 1 7 0 8 3 8 1 8 8 4 2 3 1 2 1 1 2 3 1 1 5 0 9 4 1 8 2 3 7 1 2 2 1 1 1 2 2 1 2 3 2 3 7 1 6 0 8 2 9 1 7 3 8 3 2 1 1 2 2 2 3 1 9 0 8 2 2 1 6 2 1 8 1 2 1 1 2 3 3 2 3 1 1 7 0 9 1 2 6 2 5 8 2 1 7 2 3 1 2 2 1 2 3 2 3 3 2 4 3 3 5 1 9 0 11 3 7 9 4 8 8 5 5 4 4 1 1 3 2 1 3 1 2 2 2 1 5 0 10 5 6 5 9 8 5 7 1 4 9 1 1 2 2 2 1 6 0 9 7 8 1 2 5 2 3 8 9 1 3 3 2 3 1 5 1 2 2 2 3 6 1 6 0 7 2 3 2 1 7 1 1 2 3 2 3 1 1 1 9 0 11 7 5 8 3 1 4 2 1 5 7 1 3 1 1 3 1 3 1 1 3 1 8 0 7 8 6 6 5 8 1 3 1 1 2 3 3 3 3 1 2 1 3 4 5 2 3 6 1 6 0 10 4 1 2 6 5 3 9 2 9 5 1 1 1 3 2 3 1 9 0 9 4 1 8 7 4 9 7 1 6 1 2 3 3 3 1 1 2 3 1 5 0 11 5 4 5 4 4 1 1 6 4 1 6 2 1 1 3 3 5 2 5 1 3 3 1 2 6 7 5 6 2 5 4 3 6 1 5 0 10 5 2 4 2 3 4 2 1 4 3 3 1 2 3 2 1 6 0 6 9 9 7 1 8 2 1 1 1 1 2 2 1 9 0 9 8 7 4 6 2 9 1 5 8 2 1 3 2 2 2 2 3 3 1 1 1 2 4 3 3 6 1 6 0 10 3 7 7 2 8 6 8 1 9 3 1 3 2 1 3 2 1 6 0 9 5 9 8 5 1 9 8 5 1 3 2 2 3 1 1 1 8 0 7 4 3 1 5 5 5 6 1 1 2 2 1 3 1 2 3 5 2 2 1 2 3 4 1 8 0 9 8 9 1 8 5 8 3 3 5 1 3 3 1 1 1 2 1 1 6 0 10 8 3 1 7 9 1 6 1 8 2 1 2 3 2 1 3 1 7 0 8 3 8 4 1 2 9 5 9 3 1 1 1 3 1 1 1 1 2 2 3 7 1 5 0 6 9 3 1 6 2 7 3 1 3 2 3 1 9 0 9 2 6 9 6 7 8 1 8 2 2 2 2 1 1 1 2 1 2 1 5 0 6 1 4 8 9 2 1 3 3 3 1 3 4 3 5 1 5 1 3 3 4 1 5 0 6 1 9 9 4 1 9 1 3 3 1 3 1 6 0 8 5 6 6 1 2 7 6 7 2 2 1 3 1 2 1 6 0 11 6 8 3 4 1 8 8 1 8 1 3 3 3 3 1 2 1 5 3 5 3 4 4 1 3 4 5 3 6 1 8 0 10 1 9 9 8 6 3 4 2 1 7 1 3 2 3 3 1 1 2 1 5 0 7 1 1 1 2 4 3 2 2 1 1 1 2 1 5 0 8 9 9 5 4 1 6 7 8 1 1 1 2 1 1 4 4 1 4 5 3 6 1 5 0 6 5 1 8 4 5 6 2 1 1 2 2 1 7 0 10 5 3 5 1 3 6 8 1 9 7 1 2 2 3 2 1 1 1 8 0 10 9 1 9 8 5 2 1 6 3 9 1 3 1 3 2 1 3 3 2 1 2 3 3 3 3 5 1 9 0 8 1 8 1 9 9 1 6 8 2 1 1 1 3 2 1 3 3 1 8 0 6 4 1 9 7 2 8 3 2 2 2 1 3 3 1 1 9 0 7 6 7 9 7 9 6 1 3 1 3 2 3 1 2 1 1 5 4 3 4 4 3 4 1 8 0 10 4 1 5 8 8 7 6 8 9 7 2 2 1 2 2 1 2 1 1 5 0 11 9 1 1 7 2 6 6 3 9 6 5 3 3 2 2 1 1 5 0 9 1 8 1 8 9 3 1 1 3 3 3 2 1 1 1 4 1 3 1 1 4 1 1 4 4 3 4 1 6 0 7 1 7 4 6 1 4 2 3 1 3 3 2 1 1 7 0 8 1 1 2 7 3 2 9 1 1 1 3 2 1 1 2 1 7 0 11 2 8 4 1 9 6 3 4 2 7 7 1 1 3 1 3 3 1 2 3 5 5 3 7 1 6 0 7 7 1 5 5 5 7 5 1 1 2 3 1 3 1 6 0 7 1 4 3 1 4 1 1 3 3 3 2 1 1 1 9 0 11 2 7 7 3 1 1 1 8 1 7 9 3 1 2 2 1 3 2 2 1 2 5 3 2 1 2 4 3 6 1 7 0 10 6 1 3 1 5 3 7 1 1 4 1 1 2 1 3 1 3 1 9 0 10 8 2 6 5 6 5 1 8 2 4 3 2 1 2 1 2 2 3 1 1 6 0 6 4 1 2 6 7 2 2 2 1 1 1 2 4 5 4 4 3 2 3 7 1 7 0 8 2 3 1 9 8 4 6 4 1 3 3 1 3 1 2 1 6 0 10 1 7 9 4 1 7 9 9 2 8 1 1 1 2 1 3 1 9 0 8 4 1 3 2 6 1 1 2 3 1 1 2 1 3 3 3 2 1 3 2 4 3 2 1 5 6 5 4 4 4 3 7 1 5 0 7 2 6 4 2 9 1 9 1 3 2 1 1 1 6 0 7 1 7 3 6 2 8 1 3 1 1 3 3 1 1 5 0 11 7 9 6 7 9 2 9 5 4 3 1 2 1 3 2 3 1 3 1 2 2 1 1 3 4 1 9 0 11 2 6 5 1 1 2 7 7 3 6 6 1 3 1 1 2 3 1 3 3 1 8 0 9 9 9 4 3 3 1 7 6 5 3 3 1 1 1 2 2 2 1 6 0 9 1 5 5 6 3 2 5 5 2 1 1 2 3 2 3 3 2 3 2 3 7 1 8 0 11 4 2 7 5 1 4 1 4 8 7 5 1 2 3 2 3 3 2 1 1 5 0 6 3 8 3 6 1 6 2 1 3 1 2 1 8 0 7 1 9 4 8 7 2 2 2 2 3 3 3 3 1 3 4 4 3 1 1 5 1 3 6 1 6 0 10 1 5 5 3 6 6 5 7 1 1 2 1 1 2 1 1 1 8 0 10 9 3 6 8 4 1 4 1 4 4 1 1 1 2 2 2 3 2 1 8 0 9 8 1 3 2 9 5 3 7 8 1 1 3 1 1 1 3 2 5 4 5 1 1 4 4 2 5 5 4 5 3 5 1 8 0 8 7 7 1 7 2 6 2 8 3 3 3 2 3 1 3 2 1 7 0 7 1 3 2 7 3 1 1 1 1 2 1 2 1 1 1 9 0 9 5 5 1 4 9 9 9 3 3 2 2 3 3 1 1 3 1 3 2 4 1 3 1 3 4 1 5 0 6 2 1 9 7 8 7 3 1 2 3 1 1 8 0 6 7 2 1 8 9 5 1 3 2 3 2 1 1 3 1 6 0 10 7 1 1 9 2 9 8 6 5 7 1 3 1 2 2 3 1 3 1 3 3 7 1 5 0 6 1 6 3 7 1 8 3 3 3 1 1 1 6 0 9 6 2 9 3 1 1 2 9 7 1 3 2 3 1 2 1 6 0 11 5 2 6 8 4 9 7 8 9 7 1 1 3 2 1 1 1 5 4 2 2 2 3 5 3 4 1 6 0 9 7 6 2 8 5 3 1 3 3 2 3 1 2 3 2 1 9 0 10 5 2 7 2 9 8 2 3 1 2 2 3 2 2 1 1 2 3 3 1 6 0 7 5 2 4 1 5 8 9 1 1 1 3 2 3 1 1 5 4 5 3 2 6 1 5 4 3 7 1 9 0 6 8 5 8 1 1 9 3 1 1 3 1 3 2 3 1 1 9 0 7 2 7 1 1 1 1 1 2 1 2 2 1 1 3 1 1 1 6 0 11 9 1 1 1 8 7 8 4 7 6 5 1 1 2 2 2 2 2 3 5 2 4 5 4 3 6 1 8 0 10 4 2 4 6 2 8 1 1 7 8 1 3 2 2 1 3 1 3 1 6 0 9 9 8 7 8 1 1 7 5 9 3 2 2 2 3 1 1 8 0 10 5 6 2 5 5 8 4 6 1 7 1 1 1 3 1 1 3 3 2 4 4 1 5 5 3 7 1 8 0 8 1 9 3 6 4 1 7 9 3 2 3 1 3 1 1 1 1 5 0 6 3 1 4 1 1 6 1 1 3 2 2 1 9 0 10 4 6 1 9 1 5 3 2 6 8 3 1 2 3 1 1 3 2 3 5 3 5 3 1 2 2 3 4 1 7 0 6 5 7 4 3 1 1 3 3 2 1 2 2 3 1 8 0 6 1 3 1 1 7 8 2 3 3 1 3 2 1 1 1 6 0 7 2 1 9 1 5 7 3 2 1 1 2 2 2 1 3 3 5 3 6 1 5 0 7 1 1 1 3 9 5 1 1 2 2 2 3 1 8 0 6 5 5 1 6 7 2 3 1 3 2 1 3 1 3 1 9 0 6 6 5 7 1 6 8 1 3 1 1 1 2 1 2 2 4 1 5 3 2 1 1 2 5 1 3 8 6 3 5 5 3 4 1 9 0 10 4 1 6 6 7 4 1 8 8 6 1 1 3 2 3 1 1 2 2 1 8 0 11 5 7 5 7 1 3 3 1 5 1 1 3 2 2 1 3 2 1 1 1 9 0 8 6 8 8 1 9 1 9 8 1 2 3 2 1 3 2 2 3 5 1 3 3 3 6 1 8 0 11 1 5 9 9 6 4 7 9 2 4 5 2 1 1 1 2 1 1 2 1 5 0 10 3 2 9 9 1 9 7 7 5 3 2 1 1 1 1 1 7 0 10 3 7 4 4 1 2 6 7 7 7 2 2 1 1 3 3 2 3 3 4 2 3 1 3 6 1 9 0 11 7 6 8 1 9 4 5 6 4 9 1 3 2 3 2 3 2 2 2 1 1 9 0 7 1 9 2 6 5 9 8 1 3 2 1 1 3 3 1 2 1 6 0 6 9 1 1 2 7 1 2 1 3 3 3 1 5 4 5 3 2 2 3 5 1 9 0 7 6 1 7 1 2 7 4 3 1 3 3 2 1 2 1 2 1 7 0 7 1 9 1 5 5 8 8 3 1 2 1 3 1 2 1 7 0 6 8 2 4 1 1 6 1 3 3 2 2 1 2 1 5 3 1 2 3 5 1 7 0 8 8 5 1 9 7 2 3 1 2 3 2 3 3 1 1 1 8 0 8 3 2 5 3 1 9 8 6 3 1 2 3 3 3 1 1 1 9 0 9 7 1 4 6 2 9 7 8 5 2 2 1 1 1 1 1 1 3 2 1 5 2 3 4 7 5 3 2 4 3 3 6 1 8 0 6 1 9 3 7 7 3 2 2 1 1 2 3 1 2 1 8 0 10 4 3 8 1 9 9 4 6 8 1 3 2 1 3 1 2 3 2 1 5 0 7 4 8 1 8 9 8 5 3 3 2 3 1 3 1 2 5 4 2 3 6 1 8 0 6 9 4 1 2 8 8 3 3 1 2 1 2 1 3 1 8 0 9 1 6 9 7 2 1 1 4 5 3 1 1 1 2 2 1 3 1 5 0 11 5 1 8 1 8 2 9 9 3 7 5 2 2 1 2 3 1 1 3 3 4 2 3 6 1 7 0 7 1 3 8 1 3 4 5 2 3 3 3 1 3 1 1 8 0 11 1 9 3 9 7 9 1 2 1 2 2 3 1 2 2 2 1 1 1 1 7 0 9 2 3 1 2 8 7 9 4 8 2 2 2 2 1 1 1 3 2 3 3 5 2 3 7 1 7 0 9 8 3 2 2 5 1 4 6 6 1 3 2 2 2 1 2 1 7 0 8 1 7 7 1 7 7 6 9 2 2 1 2 1 1 3 1 6 0 9 1 2 4 6 7 6 7 8 2 1 3 1 3 3 1 1 5 2 2 2 2 3 6 2 1 4 3 3 7 1 6 0 6 8 8 1 1 4 8 1 2 3 2 1 2 1 8 0 10 5 1 4 6 1 9 3 6 3 4 1 3 2 1 3 2 3 2 1 9 0 8 1 3 2 9 1 4 8 8 1 3 1 1 3 3 3 2 2 1 1 4 1 1 1 1 3 4 1 7 0 7 5 1 1 8 3 2 1 2 3 1 3 2 1 2 1 6 0 10 2 3 1 5 7 3 6 8 1 5 3 2 3 3 1 1 1 8 0 7 6 3 9 3 1 9 5 3 1 1 2 2 3 1 1 5 2 3 2 3 4 1 7 0 9 7 6 7 7 3 3 5 1 9 1 3 1 3 2 3 3 1 8 0 6 4 1 6 7 1 4 3 1 1 2 3 2 3 1 1 6 0 10 3 8 6 1 1 1 3 4 1 7 1 1 1 1 1 3 2 1 1 5 3 5 1 7 0 8 7 1 8 2 6 8 4 9 1 1 2 3 1 2 1 1 9 0 8 4 9 1 1 9 7 3 7 3 1 1 3 3 1 3 2 3 1 7 0 10 2 1 1 8 8 6 9 4 6 4 1 2 1 1 1 3 1 1 4 2 5 1 1 5 2 4 3 3 7 1 5 0 11 5 9 1 5 6 2 6 9 7 1 7 1 2 3 1 2 1 7 0 6 9 5 8 8 1 2 1 1 3 2 3 1 2 1 9 0 7 1 9 9 9 6 2 8 2 1 2 2 1 1 2 2 2 1 1 2 5 1 2 1 3 7 1 7 0 9 7 4 2 3 9 8 6 1 7 1 3 1 2 3 2 3 1 7 0 11 1 8 1 3 9 2 1 8 9 3 8 1 3 1 3 3 1 3 1 5 0 8 7 3 3 9 7 2 5 1 2 1 2 3 3 4 4 2 1 4 1 5 3 7 1 6 0 10 6 7 1 2 7 9 9 8 6 8 2 1 3 1 3 3 1 5 0 9 8 1 2 3 1 2 8 7 3 2 1 3 1 3 1 6 0 10 9 8 8 1 6 7 5 9 6 6 1 2 2 2 2 3 2 5 5 1 5 5 2 3 4 1 5 0 8 5 7 1 1 7 2 5 9 2 2 1 1 1 1 7 0 10 5 8 8 1 9 1 3 1 1 4 2 1 2 3 3 2 1 1 9 0 7 1 9 1 4 3 7 9 2 1 3 3 3 2 3 3 2 5 1 5 3 2 2 3 4 5 3 6 1 9 0 11 5 5 2 6 4 5 3 9 1 9 7 3 2 2 3 3 2 3 1 2 1 9 0 10 4 5 8 7 2 4 7 6 1 4 3 2 2 1 1 2 1 3 3 1 7 0 6 8 1 8 4 8 1 1 3 3 3 1 3 3 3 3 1 4 2 1 3 4 1 7 0 9 6 8 1 1 9 1 6 9 5 3 2 1 3 2 1 3 1 6 0 8 3 4 8 1 1 4 2 2 3 1 2 3 1 2 1 9 0 6 2 4 4 6 1 4 3 1 1 2 1 3 3 1 1 5 1 4 1 3 5 1 6 0 10 1 3 8 1 7 3 3 9 1 3 2 3 3 1 1 2 1 7 0 8 1 1 4 9 6 2 4 9 3 3 3 2 1 2 2 1 5 0 9 3 1 4 1 3 1 4 9 4 3 3 1 1 1 3 5 2 5 3 3 4 1 9 0 11 5 6 2 7 6 7 8 1 8 3 7 1 1 3 1 2 2 2 3 2 1 9 0 11 1 9 4 1 8 7 1 6 7 6 5 1 2 2 2 1 1 1 2 1 1 7 0 11 1 1 2 9 1 1 2 6 7 3 6 3 3 2 2 3 1 1 3 5 5 1 1 4 2 6 2 5 5 3 5 1 8 0 7 1 2 1 3 4 8 4 1 3 1 2 3 1 1 2 1 8 0 9 2 1 7 2 2 9 3 5 3 1 3 3 1 2 2 2 2 1 9 0 9 8 2 2 1 1 8 7 8 8 2 3 1 3 1 1 2 2 1 3 1 2 3 4 3 4 1 9 0 7 1 6 1 5 3 1 7 1 2 3 1 3 1 1 2 2 1 6 0 8 7 3 4 8 6 6 1 2 1 1 1 2 1 1 1 6 0 11 1 3 8 2 5 1 3 7 5 7 9 3 3 1 1 1 2 3 4 1 2 3 6 1 7 0 8 6 3 2 1 4 3 3 8 2 1 1 3 2 1 3 1 9 0 10 8 7 5 5 1 3 1 4 6 1 1 1 1 1 1 3 2 1 3 1 8 0 10 1 3 2 6 7 9 1 5 1 5 1 3 2 2 3 2 2 1 1 2 3 2 3 5 3 7 1 8 0 10 1 9 7 5 2 6 2 8 6 6 3 1 3 3 1 2 2 1 1 8 0 11 7 9 2 3 8 9 3 2 2 1 2 3 3 2 3 1 3 1 1 1 8 0 6 8 9 5 7 8 1 2 3 1 1 3 2 2 3 3 4 2 2 3 2 4 3 5 1 9 0 10 5 1 5 1 7 6 5 1 5 1 2 3 3 1 3 2 1 1 1 1 7 0 10 1 5 4 2 7 3 7 5 6 6 2 2 1 1 1 2 1 1 5 0 9 1 7 9 3 1 7 3 8 6 2 2 1 1 3 2 1 2 2 5 1 1 5 1 5 2 6 4 6 3 5 3 3 6 1 7 0 6 1 3 5 2 5 8 1 3 1 3 3 2 1 1 6 0 11 4 9 1 5 2 2 9 1 4 2 4 3 3 1 1 1 3 1 6 0 10 2 7 8 8 1 4 6 9 8 7 3 2 1 1 2 2 5 3 1 2 2 1 3 6 1 9 0 9 9 8 1 4 1 6 1 7 9 1 3 3 1 3 1 3 3 2 1 7 0 10 2 1 8 2 2 4 1 5 9 9 3 1 2 2 1 1 1 1 5 0 6 1 6 3 8 9 1 3 1 2 3 3 5 5 4 2 1 3 3 5 1 9 0 6 6 6 1 9 8 6 2 1 3 1 3 1 2 1 1 1 5 0 11 6 4 9 1 1 1 6 6 1 7 5 1 1 2 3 1 1 5 0 11 7 3 3 6 3 7 1 2 3 1 6 3 1 2 1 3 3 2 4 2 1 3 7 1 9 0 11 1 8 9 4 2 3 5 4 9 5 6 3 1 2 1 3 1 1 3 2 1 6 0 6 1 2 1 9 1 5 2 1 3 2 3 1 1 6 0 6 1 5 4 7 7 9 3 2 2 1 3 2 3 1 1 3 1 2 3 3 4 1 8 0 10 7 2 7 1 7 8 8 3 7 4 2 3 1 3 1 3 1 1 1 6 0 7 4 8 7 5 3 6 1 1 2 1 3 3 3 1 6 0 6 1 1 9 7 2 7 1 1 1 1 1 2 5 3 2 2 4 7 7 5 4 3 7 1 8 0 10 7 1 7 1 5 2 9 2 1 3 2 1 1 2 1 2 3 3 1 7 0 11 3 4 3 1 4 8 4 3 7 8 7 3 1 1 1 3 2 3 1 6 0 8 1 3 7 9 8 1 1 5 2 1 1 2 2 1 2 3 5 5 4 5 4 3 5 1 7 0 9 4 3 9 6 1 4 6 8 1 1 3 2 2 2 1 1 1 9 0 11 3 6 7 1 5 4 1 3 8 2 5 3 1 1 2 3 1 3 3 3 1 5 0 6 1 9 4 9 2 8 1 1 3 1 1 3 2 1 1 4 3 7 1 8 0 6 7 8 7 1 6 3 1 3 3 1 1 1 3 3 1 7 0 7 8 1 4 1 7 1 8 1 3 2 3 3 3 2 1 7 0 8 6 1 4 5 5 4 9 1 1 1 3 2 2 1 1 1 4 3 1 1 5 3 3 5 1 5 0 8 1 3 8 9 3 4 1 5 2 1 1 3 2 1 5 0 9 4 8 4 2 9 2 1 5 3 2 1 2 3 1 1 6 0 9 1 1 5 4 5 2 2 8 9 3 1 3 2 1 2 2 5 1 3 1 3 7 1 5 0 6 9 9 2 4 9 1 1 3 1 1 2 1 6 0 9 4 9 8 1 2 1 3 8 5 1 3 3 2 1 1 1 6 0 9 9 8 2 4 4 3 1 2 3 2 3 1 1 3 3 2 2 2 5 4 1 1 4 2 3 3 5 4 3 6 1 9 0 10 7 4 1 9 3 6 1 5 9 5 2 2 1 1 1 1 3 2 1 1 8 0 7 1 1 2 9 6 8 8 2 1 3 1 3 1 2 3 1 6 0 10 5 9 6 6 1 5 8 3 5 2 2 3 3 1 1 2 2 2 2 5 2 1 3 4 1 5 0 11 9 8 1 9 3 5 1 4 6 4 5 2 3 3 1 1 1 9 0 10 2 8 7 7 8 1 9 9 1 7 2 1 1 2 3 2 1 1 1 1 9 0 6 4 2 6 4 1 1 1 3 2 3 3 1 2 2 1 3 3 2 1 3 7 1 6 0 8 2 4 6 4 1 8 2 7 3 2 1 2 1 3 1 6 0 8 1 2 6 4 9 3 8 3 3 1 2 1 2 2 1 7 0 10 2 1 5 2 2 8 5 3 5 6 1 3 1 2 2 1 2 1 4 2 4 1 1 2 3 4 1 7 0 9 3 2 1 4 3 2 7 5 5 2 3 2 1 1 3 3 1 8 0 9 1 7 4 3 4 4 2 3 1 3 2 1 1 1 2 1 1 1 7 0 10 4 1 7 4 1 7 3 8 6 1 1 1 3 2 2 3 2 5 5 5 1 3 6 1 5 0 6 7 1 7 1 2 1 3 1 2 2 1 1 6 0 10 3 6 8 8 3 9 1 8 2 7 1 3 1 1 3 1 1 8 0 10 4 6 5 4 1 7 1 4 9 3 2 1 3 1 2 2 1 1 5 1 2 2 4 4 7 6 6 5 5 3 3 7 1 7 0 9 1 9 6 8 5 5 8 3 1 2 1 2 3 2 2 1 1 7 0 7 1 2 7 9 8 5 1 3 2 1 2 1 2 3 1 9 0 8 3 1 4 5 7 1 3 7 3 1 3 3 2 1 3 3 1 2 5 2 2 2 2 3 3 7 1 8 0 7 7 2 9 1 1 2 7 1 2 2 1 3 1 2 2 1 9 0 7 1 4 3 1 9 5 9 2 1 1 3 3 1 1 1 2 1 5 0 8 7 9 3 3 1 4 1 4 1 1 3 3 1 1 2 4 5 1 3 5 3 6 1 6 0 6 3 3 5 1 1 9 2 3 1 2 3 2 1 8 0 7 5 1 1 2 5 8 1 1 3 1 2 3 2 3 2 1 6 0 6 5 2 1 3 6 1 3 3 2 1 1 3 5 3 1 2 2 1 3 5 1 7 0 6 1 2 3 5 9 8 3 3 3 3 3 2 1 1 9 0 11 4 9 1 5 9 2 1 9 6 1 1 1 3 2 3 1 3 1 2 3 1 7 0 7 1 5 4 1 1 2 7 1 1 1 2 1 1 3 1 1 3 2 2 3 5 1 7 0 7 2 1 6 4 5 5 3 2 1 3 3 2 2 3 1 8 0 8 8 4 4 6 1 2 9 7 1 2 2 2 3 1 1 3 1 9 0 9 9 2 1 1 7 3 1 2 9 3 1 3 2 1 1 1 3 1 2 2 5 1 3 3 1 1 5 3 3 5 1 9 0 9 2 2 7 6 3 9 1 9 1 2 2 2 1 3 3 2 1 1 1 6 0 6 7 6 2 1 2 6 2 2 1 1 3 3 1 8 0 10 1 1 8 4 3 3 1 2 4 6 1 1 1 1 1 3 2 1 2 5 1 2 5 3 6 1 5 0 7 1 8 3 9 7 2 3 1 1 1 3 3 1 9 0 10 1 2 3 8 9 2 9 7 4 8 2 2 2 1 3 1 3 2 2 1 9 0 9 9 1 4 1 5 6 1 1 5 1 2 2 1 1 1 1 1 3 2 2 4 2 4 3 3 6 1 6 0 6 4 9 5 7 1 9 1 2 3 2 2 3 1 6 0 11 4 7 8 7 8 6 6 9 1 6 7 1 1 1 2 1 3 1 9 0 11 4 8 8 5 8 6 4 1 6 1 6 3 3 2 1 1 2 2 2 3 3 1 4 1 4 2 3 5 1 7 0 7 6 3 5 8 1 5 1 3 3 2 1 1 1 1 1 8 0 7 1 8 2 3 7 9 2 2 2 1 2 1 3 1 2 1 6 0 10 6 4 6 1 7 5 1 3 9 9 1 1 1 2 1 1 3 4 2 5 4 3 7 1 9 0 7 6 3 7 1 6 2 7 1 2 1 2 2 3 2 1 1 1 8 0 9 8 9 6 1 4 3 1 4 5 2 1 1 1 2 3 1 2 1 7 0 11 1 1 9 6 4 6 3 9 9 7 9 1 3 2 2 1 1 2 4 3 2 1 3 5 4 1 4 1 5 5 3 6 1 8 0 8 4 9 1 4 3 1 3 1 1 2 3 1 2 2 2 1 1 9 0 8 4 1 7 8 1 8 4 7 3 3 2 1 2 2 3 2 1 1 9 0 7 5 9 3 9 4 8 1 3 2 1 1 3 1 2 1 2 3 1 4 1 1 2 3 5 1 6 0 10 3 1 7 9 6 4 2 1 1 6 1 3 3 1 3 3 1 8 0 7 4 1 8 9 7 1 5 2 1 2 2 1 2 1 3 1 7 0 7 1 9 6 3 6 3 3 1 1 1 2 3 1 3 2 1 2 2 5 3 6 1 6 0 10 2 7 2 7 8 2 5 2 1 2 3 2 2 2 1 1 1 9 0 8 9 1 5 4 9 2 8 2 1 1 3 1 1 1 1 2 3 1 7 0 11 8 7 8 8 1 6 1 7 6 9 1 2 2 1 1 2 1 2 3 1 5 2 1 2 3 5 1 5 0 6 1 3 9 8 3 7 1 1 2 3 1 1 9 0 6 6 4 3 1 3 5 2 2 3 3 3 2 3 1 1 1 5 0 8 8 9 8 8 1 5 8 1 1 1 1 1 3 3 1 3 2 2 3 4 1 7 0 6 2 3 1 8 1 1 2 2 1 3 3 1 1 1 6 0 6 6 5 1 5 6 5 3 1 1 1 2 1 1 5 0 10 1 7 1 2 2 1 6 2 7 3 2 2 3 1 1 4 5 3 3 4 5 3 3 5 5 6 2 6 2 5 5 3 6 1 6 0 7 3 9 6 3 7 8 1 1 1 2 2 2 1 1 9 0 8 3 8 6 9 2 1 4 5 1 2 3 3 3 3 3 1 1 1 5 0 8 5 6 5 7 1 1 3 5 1 1 2 1 3 1 3 4 1 5 1 3 6 1 7 0 9 1 4 5 5 1 7 6 3 4 1 3 1 3 1 2 1 1 5 0 10 6 3 6 1 4 9 3 9 3 6 1 1 1 2 3 1 7 0 7 7 3 1 5 4 1 5 3 1 1 1 1 2 2 5 1 1 4 3 3 3 4 1 8 0 11 6 9 8 2 5 6 2 2 5 4 1 3 1 3 1 1 1 2 3 1 9 0 6 8 4 8 2 8 1 3 1 3 1 1 1 1 1 1 1 5 0 9 4 1 9 1 7 4 6 6 1 1 1 2 3 3 2 2 4 3 3 5 1 9 0 6 9 1 2 8 9 9 1 2 3 2 1 3 2 1 3 1 7 0 6 3 2 2 1 2 5 3 2 2 1 1 3 1 1 9 0 6 9 4 2 9 1 7 1 3 1 3 1 1 3 1 1 1 5 1 2 2 3 6 1 9 0 7 1 1 6 9 1 8 1 1 1 3 1 1 3 1 3 3 1 9 0 11 6 7 9 1 4 5 2 5 9 8 4 1 1 1 1 3 3 3 1 3 1 7 0 7 1 5 8 6 8 9 4 2 3 3 2 3 1 3 2 2 3 2 3 3 5 4 7 6 2 5 3 3 6 1 5 0 7 2 9 1 2 5 9 1 1 3 3 3 2 1 9 0 11 1 9 4 9 6 4 1 8 6 4 9 2 1 3 1 3 1 2 1 1 1 9 0 9 1 3 9 4 6 1 8 5 8 2 1 1 2 2 3 1 2 3 1 5 5 2 2 2 3 7 1 5 0 6 8 5 1 4 6 8 1 2 1 1 1 1 5 0 11 9 8 1 6 1 9 9 2 2 7 7 1 1 1 3 3 1 7 0 11 4 9 4 3 7 9 6 6 1 4 4 2 3 2 2 2 2 1 2 4 1 1 3 5 2 3 4 1 6 0 9 6 5 6 7 1 1 8 4 1 1 1 3 1 2 2 1 7 0 9 2 3 4 7 3 1 2 7 4 3 3 1 1 3 1 1 1 9 0 9 8 6 1 8 6 9 6 7 8 2 1 3 1 2 1 3 2 2 5 3 3 4 3 7 1 5 0 7 3 4 1 8 6 5 8 3 3 1 1 1 1 5 0 11 3 2 9 9 7 9 9 1 9 9 7 2 1 1 1 1 1 6 0 10 1 7 4 2 1 2 3 9 7 9 1 2 1 2 1 1 5 4 3 3 4 4 3 3 6 1 8 0 11 8 5 8 5 2 6 1 8 7 5 8 3 2 2 2 1 2 3 2 1 9 0 6 6 4 6 9 6 1 1 3 1 2 2 1 3 2 3 1 5 0 7 4 4 8 1 3 1 1 1 1 3 3 2 2 1 1 3 2 5 1 1 3 4 3 3 5 1 5 0 6 7 1 2 3 2 7 1 1 3 3 2 1 5 0 10 9 1 3 7 5 8 9 5 6 1 3 1 1 2 3 1 6 0 7 5 5 3 3 8 1 8 1 1 3 1 1 3 2 3 4 1 3 3 5 1 6 0 8 5 5 9 5 1 1 9 9 1 1 2 1 3 3 1 5 0 10 4 3 2 3 1 8 4 4 9 5 1 1 3 3 1 1 7 0 6 1 9 3 6 8 7 1 1 3 2 1 3 2 2 1 1 3 4 3 6 1 7 0 9 7 3 8 7 7 7 1 5 4 3 1 1 3 2 3 1 1 9 0 7 1 2 3 4 5 5 2 1 1 3 3 2 1 2 1 1 1 7 0 8 3 9 1 1 8 9 5 8 2 3 2 1 2 3 1 3 4 5 5 5 2 3 7 1 5 0 9 1 1 1 7 6 8 1 3 8 3 1 1 3 2 1 5 0 11 2 2 4 2 4 1 4 3 3 4 5 3 3 1 2 2 1 8 0 10 5 3 5 9 1 2 1 9 5 7 1 1 1 1 2 2 3 3 1 5 2 2 2 5 2 6 3 2 5 5 3 4 1 8 0 9 3 6 5 6 1 2 5 9 3 2 2 1 1 1 2 2 1 1 8 0 10 1 5 2 4 3 2 1 1 5 2 1 3 3 2 1 1 1 2 1 7 0 9 6 3 6 1 1 4 1 2 4 3 1 1 3 2 2 3 1 1 3 3 3 4 1 8 0 10 9 5 1 1 1 2 1 9 6 9 3 2 3 1 1 2 2 2 1 7 0 10 6 8 6 7 7 6 6 7 8 1 3 2 2 3 1 2 2 1 6 0 8 6 9 7 2 6 9 6 1 3 1 3 3 2 1 5 1 1 3 3 5 1 5 0 8 5 1 2 1 7 5 6 9 2 1 3 3 1 1 8 0 9 3 9 1 7 9 2 6 5 2 1 2 2 3 2 1 2 2 1 5 0 10 8 9 3 7 2 9 2 1 9 4 1 1 1 1 2 3 2 1 1 2 3 4 1 6 0 10 8 4 4 4 1 7 1 9 9 8 3 2 2 1 1 2 1 5 0 8 2 5 1 6 8 1 9 7 3 2 1 1 2 1 6 0 10 6 1 5 1 7 2 7 7 8 8 2 1 1 2 2 2 4 3 4 5 3 7 1 7 0 10 1 7 1 8 6 7 1 9 1 7 2 3 3 3 2 1 1 1 7 0 11 8 5 1 9 9 5 2 6 2 3 9 1 2 1 3 2 1 1 1 9 0 10 1 5 4 7 5 4 6 8 3 6 3 2 1 1 3 3 3 3 3 2 2 1 5 4 1 3 2 4 5 1 4 4 4 3 5 1 8 0 7 8 6 5 1 7 8 8 2 1 2 1 1 2 3 2 1 7 0 8 3 5 7 1 4 3 7 9 2 1 1 3 2 1 2 1 8 0 6 1 7 1 3 9 6 1 2 1 1 1 2 2 2 1 5 1 4 4 3 7 1 5 0 11 8 5 4 9 1 2 4 1 6 3 1 3 2 2 1 1 1 6 0 9 7 6 6 4 5 2 3 1 6 2 3 2 1 3 1 1 9 0 7 2 8 1 5 2 9 9 2 2 1 1 3 3 3 2 2 2 2 1 3 5 1 4 3 4 1 7 0 9 1 4 1 6 7 1 9 5 6 1 3 1 3 1 2 2 1 8 0 11 5 9 4 9 8 9 6 8 5 4 1 2 3 2 1 3 1 1 3 1 5 0 7 7 1 7 2 9 5 9 3 2 1 3 1 3 4 2 3 3 5 1 7 0 10 4 6 4 9 1 2 9 6 9 8 2 3 2 1 1 1 3 1 6 0 6 4 7 3 7 1 8 1 1 2 3 3 2 1 7 0 8 8 4 4 2 4 1 3 8 1 1 1 2 2 1 1 5 5 2 5 2 1 3 1 2 5 4 3 5 1 9 0 6 2 7 2 6 1 5 1 2 1 1 3 2 1 3 2 1 8 0 6 9 3 1 2 4 8 1 1 1 3 1 2 2 2 1 7 0 6 6 1 1 5 3 3 1 2 1 2 1 1 2 3 2 1 5 5 3 4 1 8 0 10 7 3 3 8 8 2 1 7 3 2 2 3 2 1 1 3 2 3 1 9 0 7 6 7 7 1 6 5 7 2 2 1 1 3 2 2 2 2 1 6 0 8 1 1 8 3 3 7 1 4 1 3 2 1 1 1 2 3 3 4 3 5 1 5 0 11 5 5 4 1 4 8 6 1 7 1 5 1 2 1 3 1 1 6 0 9 1 1 7 6 5 5 3 3 3 1 3 1 1 3 3 1 9 0 9 2 6 9 3 1 5 7 9 9 3 1 1 2 2 3 1 1 2 3 3 4 1 2 3 5 1 8 0 11 1 1 4 5 5 2 6 9 4 5 3 1 3 3 3 1 1 1 2 1 7 0 10 3 1 1 8 7 5 6 1 4 8 3 3 1 1 3 1 2 1 9 0 11 5 2 5 1 7 4 6 8 6 1 8 2 1 3 1 3 1 2 1 3 2 2 2 5 3 3 4 1 8 0 9 7 1 2 9 7 5 2 3 7 1 2 3 3 3 1 1 1 1 6 0 6 8 1 4 1 5 7 3 3 1 1 3 2 1 7 0 8 8 3 9 8 6 2 1 1 3 1 2 3 1 3 1 2 4 4 4 6 7 3 1 7 3 2 1 4 6 8 3 3 3 3 11 1';\n\nexport default data;\n","const data = '404 players; last marble is worth 71852 points';\n\nexport default data;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split('\\n');\n    let points = [];\n\n    // organize data, find bounds\n\n    let lowestStartX = 0;\n    let lowestStartY = 0;\n    let highestStartX = 0;\n    let highestStartY = 0;\n\n    for (let i = 0; i < dataArr.length; i++) {\n      const dataRegex = /position=<(?: *)([-]?\\d*?),(?: *)([-]?\\d*?)> velocity=<(?: *)([-]?\\d*?),(?: *)([-]?\\d*?)>$/g;\n      const result = dataRegex.exec(dataArr[i]);\n      let startX = Number(result[1]);\n      let startY = Number(result[2]);\n      if (startX < lowestStartX) lowestStartX = startX;\n      if (startY < lowestStartY) lowestStartY = startY;\n      if (startX > highestStartX) highestStartX = startX;\n      if (startY > highestStartY) highestStartY = startY;\n      const point = {\n        start: [startX, startY],\n        velocity: [Number(result[3]), Number(result[4])],\n      }\n      points.push(point);\n    }\n\n    // make all positions positive, assign currentPos, assign to rows\n\n    let adjX = Math.abs(lowestStartX);\n    let adjY = Math.abs(lowestStartY);\n    let byRow = [];\n\n    for (let i = 0; i < points.length; i++) {\n      let start = points[i].start;\n      const posStartX = start[0] + adjX;\n      const posStartY = start[1] + adjY;\n      points[i].start = [posStartX, posStartY];\n      points[i].currentPos = [posStartX, posStartY];\n      if (!byRow[posStartY]) byRow[posStartY] = [];\n      byRow[posStartY].push(posStartX);\n    }\n\n    // draw string grid\n\n    let xSpots = highestStartX + adjX;\n    let ySpots = highestStartY + adjY;\n    let lastXSpots;\n    let lastYSpots;\n\n    let seconds = 0;\n\n    // apply movements and find new bounds\n\n    const revertMovements = () => {\n\n      seconds--;\n\n      let content = [\n        `Exactly how many seconds would they have needed to wait for that message to appear?`,\n        `${seconds}!!!!!!! 🦄`,\n      ];\n\n      this.setState({\n        content,\n      });\n    }\n\n    let allDone = false;\n\n    const applyMovements = () => {\n      seconds++;\n      byRow = [];\n      let lowestCurrX;\n      let lowestCurrY;\n      let highestCurrX;\n      let highestCurrY;\n      lastXSpots = xSpots;\n      lastYSpots = ySpots;\n      for (let i = 0; i < points.length; i++) {\n        let currX = points[i].currentPos[0] + points[i].velocity[0];\n        let currY = points[i].currentPos[1] + points[i].velocity[1];\n        points[i].currentPos = [currX, currY];\n        if (!byRow[currY]) byRow[currY] = [];\n        byRow[currY].push(currX);\n        if (lowestCurrX === undefined || currX < lowestCurrX) lowestCurrX = currX;\n        if (lowestCurrY === undefined || currY < lowestCurrY) lowestCurrY = currY;\n        if (highestCurrX === undefined || currX > highestCurrX) highestCurrX = currX;\n        if (highestCurrY === undefined || currY > highestCurrY) highestCurrY = currY;\n      }\n      xSpots = highestCurrX - lowestCurrX + 1;\n      ySpots = highestCurrY - lowestCurrY + 1;\n      if (xSpots > lastXSpots) {\n        xSpots = lastXSpots;\n        ySpots = lastYSpots;\n        return 'fuck';\n      } else {\n        adjX = lowestCurrX;\n        adjY = lowestCurrY;\n      }\n    }\n\n    while (true) {\n      allDone = applyMovements();\n      if (allDone === 'fuck') {\n        revertMovements();\n        break;\n      }\n    }\n\n\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <div className=\"my-4\">\n          <Jumbotron className=\"Solution__Jumbotron\">\n            <h3>{this.state.content[0]}</h3>\n            <hr className=\"my-2\" />\n            <div>{this.state.content[1]}</div>\n          </Jumbotron>\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const serial = Number(data);\n\n    const calcPower = (x, y) => {\n      return Math.trunc(((((x + 10) * y) + serial) * (x + 10)) / 100 % 10) - 5;\n    }\n\n    const gridArray = [];\n\n    for (let row = 0; row < 300; row++) {\n      const y = row + 1;\n      const rowArray = [];\n      for (let col = 0; col < 300; col++) {\n        const x = col + 1;\n        const power = calcPower(x, y);\n        rowArray.push(power);\n      }\n      gridArray.push(rowArray);\n    }\n\n    console.log(gridArray);\n\n    const papaGridArray = []\n\n    let highestPower9 = 0;\n    let winningCoords;\n\n    for (let row = 0; row < 298; row++) {\n      const y = row + 1;\n      const rowArray = [];\n      for (let col = 0; col < 298; col++) {\n        const x = col + 1;\n        let power9 = 0;\n        power9 += gridArray[row][col];\n        power9 += gridArray[row][col + 1];\n        power9 += gridArray[row][col + 2];\n        power9 += gridArray[row + 1][col];\n        power9 += gridArray[row + 1][col + 1];\n        power9 += gridArray[row + 1][col + 2];\n        power9 += gridArray[row + 2][col];\n        power9 += gridArray[row + 2][col + 1];\n        power9 += gridArray[row + 2][col + 2];\n        rowArray.push(power9);\n        if (power9 > highestPower9) {\n          highestPower9 = power9;\n          winningCoords = [x, y];\n        }\n      }\n      papaGridArray.push(rowArray);\n    }\n\n    console.log(papaGridArray);\n    console.log(winningCoords);\n\n    const drawGrid = () => {\n      const xWin = winningCoords[0];\n      const yWin = winningCoords[1];\n      let jsxGrid = [];\n      for (let row = 0; row < 300; row++) {\n        if (row + 1 > yWin - 2 && row + 1 < yWin + 4) {\n          const rowArray = [];\n          for (let col = 0; col < 300; col++) {\n            if (col + 1 > xWin - 2 && col + 1 < xWin + 4) {\n              if (\n                row >= winningCoords[1] - 1\n                && row < winningCoords[1] - 1 + 3\n                && col >= winningCoords[0] - 1\n                && col < winningCoords[0] - 1 + 3\n              ) {\n                rowArray.push(\n                  <span style={{color: 'red', fontWeight: 'bold'}}>\n                    {gridArray[row][col].toString().padStart(2)}\n                  </span>\n                );\n              } else {\n                rowArray.push(gridArray[row][col].toString().padStart(2));\n              }\n            }\n          }\n          jsxGrid.push(rowArray);\n        }\n      }\n\n      let grid = [];\n\n      jsxGrid.forEach((row, index) => {\n        grid.push(<div key={index}>{row}</div>);\n      })\n\n      let content = [\n        `What is the X,Y coordinate of the top-left fuel cell of the 3x3 square with the largest total power?`,\n        `${winningCoords[0]},${winningCoords[1]}! 🦋`,\n        grid,\n      ];\n\n      this.setState({\n        content,\n      });\n    }\n\n    drawGrid();\n\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <pre className=\"my-4 monospace\" style={{fontSize: '2rem'}}>\n          {this.state.content[2]}\n        </pre>\n        <Jumbotron className=\"Solution__Jumbotron\">\n          <h3>{this.state.content[0]}</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron, Progress } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n      progress: 0,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const serial = Number(data);\n\n    const calcPower = (x, y) => {\n      return Math.trunc(((((x + 10) * y) + serial) * (x + 10)) / 100 % 10) - 5;\n    }\n\n    const gridArray = [];\n\n    for (let row = 0; row < 300; row++) {\n      const y = row + 1;\n      const rowArray = [];\n      for (let col = 0; col < 300; col++) {\n        const x = col + 1;\n        const power = calcPower(x, y);\n        rowArray.push(power);\n      }\n      gridArray.push(rowArray);\n    }\n\n\n    let highestPowerSquare = 0;\n    let winningCoordsAndSize;\n\n    const evaluateSquareSize = size => {\n      let papaGridArray = []\n      for (let row = 0; row < 301 - size; row++) {\n        const y = row + 1;\n        const rowArray = [];\n        for (let col = 0; col < 301 - size; col++) {\n          const x = col + 1;\n          let powerSquare = 0;\n          for (let i = 0; i < size; i++) {\n            for (let j = 0; j < size; j++) {\n              powerSquare += gridArray[row + i][col + j];\n            }\n          }\n          rowArray.push(powerSquare);\n          if (powerSquare > highestPowerSquare) {\n            highestPowerSquare = powerSquare;\n            winningCoordsAndSize = [x, y, size];\n          }\n        }\n        papaGridArray.push(rowArray);\n      }\n\n    }\n\n    const promiseArray = [];\n\n    for (let i = 1; i < 301; i++) {\n      const step = new Promise(resolve => {\n        setTimeout(() => {\n          resolve(evaluateSquareSize(i));\n        },0);\n      }).then(() => {\n        this.setState({ progress: i - 1 });\n        const progressBar = document.getElementsByClassName('progress-bar')[0];\n        progressBar.style.display='none';\n        progressBar.offsetHeight; // eslint-disable-line no-unused-expressions\n        progressBar.style.display='block';\n      });\n      promiseArray.push(step);\n    }\n\n    const drawGrid = () => {\n      const xWin = winningCoordsAndSize[0];\n      const yWin = winningCoordsAndSize[1];\n      const size = winningCoordsAndSize[2];\n      let jsxGrid = [];\n      for (let row = 0; row < 300; row++) {\n        if (row + 1 > yWin - 2 && row + 1 < yWin + size + 1) {\n          const rowArray = [];\n          for (let col = 0; col < 300; col++) {\n            if (col + 1 > xWin - 2 && col + 1 < xWin + size + 1) {\n              if (\n                row >= yWin - 1\n                && row < yWin - 1 + size\n                && col >= xWin - 1\n                && col < xWin - 1 + size\n              ) {\n                rowArray.push(\n                  <span style={{color: 'red', fontWeight: 'bold'}}>\n                    {gridArray[row][col].toString().padStart(2)}\n                  </span>\n                );\n              } else {\n                rowArray.push(gridArray[row][col].toString().padStart(2));\n              }\n            }\n          }\n          jsxGrid.push(rowArray);\n        }\n      }\n\n      let grid = [];\n\n      jsxGrid.forEach((row, index) => {\n        grid.push(<div key={index}>{row}</div>);\n      })\n\n      let content = [\n        `What is the X,Y,size identifier of the square with the largest total power?`,\n        `${winningCoordsAndSize[0]},${winningCoordsAndSize[1]},${winningCoordsAndSize[2]}! 😇`,\n        grid,\n      ];\n\n      this.setState({\n        content,\n        progress: 300,\n      });\n    }\n\n    Promise.all(promiseArray).then(() => {\n      drawGrid();\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    let solution;\n    if (this.state.progress === 300) {\n      solution = (\n        <Jumbotron className=\"Solution__Jumbotron\">\n          <h3>{this.state.content[0]}</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"text-center\">{`${this.state.progress} / 300`}</div>\n        <Progress value={this.state.progress / 3} style={{transform: 'translateZ(0)'}}/>\n        <pre className=\"my-4 monospace\">\n          {this.state.content[2]}\n        </pre>\n        {solution}\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n\n    const dataArr = data.split('\\n');\n    let initialState = dataArr.shift();\n    initialState = initialState.substring(15, initialState.length);\n    dataArr.shift();\n    console.log(initialState);\n    console.log(dataArr);\n\n    let plantGuide = [];\n\n    for (let i = 0; i < dataArr.length; i++) {\n      if (dataArr[i][9] === '#') {\n        plantGuide.push(dataArr[i].substring(0, 5))\n      }\n    }\n\n    console.log(plantGuide);\n\n    let gens = [];\n    let twentyTwoDots = '.'.repeat(22);\n    const initialExpanded = twentyTwoDots + initialState + twentyTwoDots;\n    const len = initialExpanded.length;\n    console.log(initialExpanded);\n\n    gens.push(initialExpanded);\n    let gensStr = `${initialExpanded}\\n`;\n\n\n    for (let gen = 1; gen <= 20; gen++) {\n      const lastGen = gens[gens.length - 1];\n      let thisGen = '..';\n      for (let i = 2; i < len - 2; i++) {\n        const pattern = lastGen.substring(i - 2, i + 3);\n        if (plantGuide.indexOf(pattern) !== -1) {\n          thisGen += '#';\n        } else {\n          thisGen += '.';\n        }\n      }\n      thisGen += '..';\n      gens.push(thisGen);\n      gensStr += `${thisGen}\\n`;\n    }\n\n    const lastGen = gens[20];\n    let plantIdSum = 0;\n\n    console.log(lastGen);\n\n    for (let i = 0; i < lastGen.length; i++) {\n      const plantId = i - 22;\n      if (lastGen[i] === '#') {\n        plantIdSum += plantId;\n      }\n    }\n\n    this.setState({\n      content: [\n        gensStr,\n        plantIdSum\n      ],\n    })\n\n\n\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <pre className=\"my-4 monospace\">\n          {this.state.content[0]}\n        </pre>\n        <Jumbotron className=\"Solution__Jumbotron\">\n          <h3>After 20 generations, what is the sum of the numbers of all pots which contain a plant?</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n\n    const dataArr = data.split('\\n');\n    let initialState = dataArr.shift();\n    initialState = initialState.substring(15, initialState.length);\n    dataArr.shift();\n    console.log(initialState);\n    console.log(dataArr);\n\n    let plantGuide = [];\n\n    for (let i = 0; i < dataArr.length; i++) {\n      if (dataArr[i][9] === '#') {\n        plantGuide.push(dataArr[i].substring(0, 5))\n      }\n    }\n\n    console.log(plantGuide);\n\n    let genCount = 500;\n    let originalGenCount = genCount;\n    let gens = [];\n    let bulkDots = '.'.repeat(genCount + 2);\n    const initialExpanded = bulkDots + initialState + bulkDots;\n    const len = initialExpanded.length;\n    console.log(initialExpanded);\n\n    gens.push(initialExpanded);\n    let gensStr = `${initialState}\\n`;\n\n    let trimmedGens = ['this represents the 0th gen'];\n\n    let plantCount;\n\n    for (let gen = 1; gen <= genCount; gen++) {\n      let lastTrimmedGen = trimmedGens[trimmedGens.length - 1];\n      const lastGen = gens[gens.length - 1];\n      let thisGen = '..';\n      let firstPlantIndex = null;\n      let lastPlantIndex = null;\n      plantCount = 0;\n      for (let i = 2; i < len - 2; i++) {\n        const pattern = lastGen.substring(i - 2, i + 3);\n        if (plantGuide.indexOf(pattern) !== -1) {\n          thisGen += '#';\n          plantCount++;\n          if (firstPlantIndex === null) firstPlantIndex = i;\n          lastPlantIndex = null;\n        } else {\n          thisGen += '.';\n          if (lastPlantIndex === null) lastPlantIndex = i;\n        }\n      }\n      thisGen += '..';\n      gens.push(thisGen);\n\n      let trimmedGen = thisGen.substring(firstPlantIndex, lastPlantIndex);\n      gensStr += `${trimmedGen}\\n`;\n      trimmedGens.push(trimmedGen);\n      if (lastTrimmedGen === trimmedGen) genCount = gen;\n    }\n\n    console.log(gens);\n\n    const lastGen = gens[genCount];\n    let plantIdSum = 0;\n\n    for (let i = 0; i < lastGen.length; i++) {\n      const plantId = i - (originalGenCount + 2);\n      if (lastGen[i] === '#') {\n        plantIdSum += plantId;\n      }\n    }\n\n    const finalPattern = trimmedGens[genCount];\n    const secondToLastGen = gens[genCount - 1];\n    const patternIndex1 = secondToLastGen.indexOf(finalPattern);\n    const patternIndex2 = lastGen.indexOf(finalPattern);\n    const direction = patternIndex2 - patternIndex1;\n    const remainingGens = 50000000000 - genCount;\n    const plantIdAdjustment = plantCount * direction * remainingGens;\n\n    plantIdSum += plantIdAdjustment;\n\n    this.setState({\n      content: [\n        `${gensStr}\\n\\n...and so on`,\n        plantIdSum\n      ],\n    })\n\n\n\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <pre className=\"my-4 monospace\">\n          {this.state.content[0]}\n        </pre>\n        <Jumbotron className=\"Solution__Jumbotron\">\n          <h3>After fifty billion generations, what is the sum of the numbers of all pots which contain a plant?</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const emojis = codysData.emojis;\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split('\\n');\n\n    // get all x, y pairs\n\n    const coords = [];\n    let xLow;\n    let xHigh;\n    let yLow;\n    let yHigh;\n\n    for (let string of dataArr) {\n      const xyRegex = /(.*?), (.*?)$/g;\n      const xy = xyRegex.exec(string);\n      console.log(xy);\n      const x = Number(xy[1]);\n      const y = Number(xy[2]);\n      coords.push([x,y]);\n      if (!xLow || x < xLow) xLow = x;\n      if (!xHigh || x > xHigh) xHigh = x;\n      if (!yLow || y < yLow) yLow = y;\n      if (!yHigh || y > yHigh) yHigh = y;\n    }\n\n    // set bounds of grid based on lowest/highest xy\n\n    const width = xHigh - xLow;\n    const height = yHigh - yLow;\n\n    const yTemplate = Array(width).fill(0); // columns\n    const xyArray = Array(height).fill(null); // rows\n\n    let adjCoords = [];\n\n    coords.forEach((pair, i) => {\n      const adjX = pair[0] - xLow;\n      const adjY = pair[1] - yLow;\n      const adjPair = [adjX, adjY];\n      adjCoords.push(adjPair);\n    });\n\n    // check each coordinate within grid and find closest pair\n\n    xyArray.forEach((yArray, yIndex) => {\n      if (yArray === null) {\n        xyArray[yIndex] = yTemplate.slice(0);\n      }\n      xyArray[yIndex].forEach((value, xIndex) => {\n        const totalDiffs = [];\n        adjCoords.forEach((pair, coordIndex) => {\n          let xDiff = pair[0] - xIndex;\n          xDiff = -xDiff > 0 ? -xDiff : xDiff; // make positive\n          let yDiff = pair[1] - yIndex;\n          yDiff = -yDiff > 0 ? -yDiff : yDiff; // make positive\n          const totalDiff = xDiff + yDiff;\n          totalDiffs.push({coordIndex, totalDiff});\n        });\n        totalDiffs.sort((a, b) => a.totalDiff - b.totalDiff)\n        let closestPair;\n        if (totalDiffs[0].totalDiff === totalDiffs[1].totalDiff) {\n          closestPair = 99;\n        } else {\n          closestPair = totalDiffs[0].coordIndex;\n        }\n        xyArray[yIndex][xIndex] = closestPair;\n      });\n    });\n\n    // discard pairs that have a closest pair on the edge\n\n    const pairsToDiscard = [];\n    const scoreCount = [];\n\n    xyArray.forEach((yArray, yIndex) => {\n      xyArray[yIndex].forEach((value, xIndex) => {\n        if (\n          yIndex === 0\n          || yIndex === xyArray.length - 1\n          || xIndex === 0\n          || xIndex === xyArray[yIndex].length - 1\n        ) {\n          pairsToDiscard.push(value);\n        }\n      });\n    });\n\n    xyArray.forEach((yArray, yIndex) => {\n      xyArray[yIndex].forEach((value, xIndex) => {\n        if (pairsToDiscard.indexOf(value) !== -1) {\n          xyArray[yIndex][xIndex] = 99;\n        }\n        if (!scoreCount[xyArray[yIndex][xIndex]]) {\n          scoreCount[xyArray[yIndex][xIndex]] = [xyArray[yIndex][xIndex], 0]\n        }\n        scoreCount[xyArray[yIndex][xIndex]][1]++;\n      });\n    });\n\n\n\n\n    scoreCount.sort((a, b) => (b[1] - a[1]));\n\n    // display\n\n    let parsed = [];\n\n    xyArray.forEach((yArray, yIndex) => {\n      let row = [];\n      xyArray[yIndex].forEach((value, xIndex) => {\n        row.push(emojis[value]);\n        // `${value.toString().padStart(2, '0')}`\n      });\n      parsed.push(<div key={yIndex}>{row}</div>);\n    });\n\n    const result = `${emojis[scoreCount[1][0]]} has the largest area size: ${scoreCount[1][1]}`\n\n    this.setState({\n      content: [\n        parsed,\n        result,\n      ]\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <Jumbotron className=\"my-4 Solution__Jumbotron\">\n          <h3>What is the size of the largest area that isn't infinite?</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n        <pre className=\"my-4 monospace font-small\">\n          {this.state.content[0]}\n        </pre>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const emojis = codysData.emojis;\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split('\\n');\n\n    // get all x, y pairs\n\n    const coords = [];\n    let xLow;\n    let xHigh;\n    let yLow;\n    let yHigh;\n\n    for (let string of dataArr) {\n      const xyRegex = /(.*?), (.*?)$/g;\n      const xy = xyRegex.exec(string);\n      const x = Number(xy[1]);\n      const y = Number(xy[2]);\n      coords.push([x,y]);\n      if (!xLow || x < xLow) xLow = x;\n      if (!xHigh || x > xHigh) xHigh = x;\n      if (!yLow || y < yLow) yLow = y;\n      if (!yHigh || y > yHigh) yHigh = y;\n    }\n\n    // set bounds of grid based on lowest/highest xy\n\n    const width = xHigh - xLow;\n    const height = yHigh - yLow;\n\n    const yTemplate = Array(width).fill(0); // columns\n    const xyArray = Array(height).fill(null); // rows\n\n    let adjCoords = [];\n\n    coords.forEach((pair, i) => {\n      const adjX = pair[0] - xLow;\n      const adjY = pair[1] - yLow;\n      const adjPair = [adjX, adjY];\n      adjCoords.push(adjPair);\n    });\n\n    // check each coordinate within grid and find closest pair\n\n    let elevenCount = 0;\n\n    xyArray.forEach((yArray, yIndex) => {\n      if (yArray === null) {\n        xyArray[yIndex] = yTemplate.slice(0);\n      }\n      xyArray[yIndex].forEach((value, xIndex) => {\n        const totalDiffs = [];\n        adjCoords.forEach((pair, coordIndex) => {\n          let xDiff = pair[0] - xIndex;\n          xDiff = -xDiff > 0 ? -xDiff : xDiff; // make positive\n          let yDiff = pair[1] - yIndex;\n          yDiff = -yDiff > 0 ? -yDiff : yDiff; // make positive\n          const totalDiff = xDiff + yDiff;\n          totalDiffs.push(totalDiff);\n        });\n        let totalDistance = 0;\n        totalDiffs.forEach(value => {\n          totalDistance += value;\n        })\n        // 11 less than 10000\n        // 88 10000+\n        let flag = 88;\n        if (totalDistance < 10000) {\n          flag = 11;\n          elevenCount++;\n        }\n        xyArray[yIndex][xIndex] = flag;\n      });\n    });\n\n    // display\n\n    let parsed = [];\n\n    xyArray.forEach((yArray, yIndex) => {\n      let row = [];\n      xyArray[yIndex].forEach((value, xIndex) => {\n        row.push(emojis[value]);\n        // `${value.toString().padStart(2, '0')}`\n      });\n      parsed.push(<div key={yIndex}>{row}</div>);\n    });\n\n    const result = `${elevenCount}!!!`;\n\n    this.setState({\n      content: [\n        parsed,\n        result,\n      ]\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <Jumbotron className=\"my-4 Solution__Jumbotron\">\n          <h3>\n            What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000???\n          </h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n        <pre className=\"my-4 monospace font-small\">\n          {this.state.content[0]}\n        </pre>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split('\\n');\n    const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n\n    // Part 1\n\n    const steps = {};\n\n    for (const string of dataArr) {\n      const prereq = string[5];\n      const step = string[36];\n      if (!steps[step]) {\n        steps[step] = {\n          prereqs: [prereq],\n          remaining: [prereq],\n        }\n      } else {\n        steps[step].prereqs.push(prereq);\n        steps[step].remaining.push(prereq);\n      }\n    }\n\n    let order = '';\n    let allDone = false;\n\n    const prereqComplete = prereq => {\n      for (const step in steps) {\n        const remaining = steps[step].remaining;\n        const i = remaining.indexOf(prereq);\n        if (i !== -1) {\n          remaining.splice(i, 1);\n        }\n      }\n    }\n\n    while(!allDone) {\n      for (const letter of alphabet) {\n        if (\n          order.indexOf(letter) === -1\n          && (\n            !steps[letter]\n            || steps[letter].remaining.length === 0\n          )\n        ) {\n          order += letter;\n          prereqComplete(letter);\n          break;\n        }\n      }\n      if (order.length === 26) {\n        allDone = true;\n      }\n    }\n\n    this.setState({\n      content: `The proper order is ${order}! 🌈`\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <Jumbotron className=\"my-4 Solution__Jumbotron\">\n          <h3>In what order should the steps in your instructions be completed?</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content}</div>\n        </Jumbotron>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Table, Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split('\\n');\n    const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n\n    const steps = {};\n\n    const buildStepObj = (step, prereq) => {\n      let time = 60;\n      let adj = alphabet.indexOf(step) + 1;\n      time += adj;\n      let prereqArray = prereq ? [prereq] : [];\n      let remainingArray = prereq ? [prereq] : [];\n      return {\n        prereqs: prereqArray,\n        remaining: remainingArray,\n        time,\n      }\n    }\n\n    for (const string of dataArr) {\n      const prereq = string[5];\n      const step = string[36];\n      if (!steps[step]) {\n        steps[step] = buildStepObj(step, prereq);\n      } else {\n        steps[step].prereqs.push(prereq);\n        steps[step].remaining.push(prereq);\n      }\n    }\n\n    for (const letter of alphabet) {\n      if (!steps[letter]) {\n        steps[letter] = buildStepObj(letter);\n      }\n    }\n\n    console.log(steps);\n\n    let seconds = [];\n    let second = 0;\n    let availableTasks = [];\n    let assignedTasks = '';\n    let completedTasks = '';\n    let workers = new Array(5);\n    for (var i = 0; i < 5; i++) {\n        workers[i] = {\n          task: null,\n          remainingSeconds: 0,\n        };\n    }\n\n    const prereqComplete = prereq => {\n      for (const step in steps) {\n        const i = steps[step].remaining.indexOf(prereq);\n        if (i !== -1) {\n          steps[step].remaining.splice(i, 1);\n        }\n      }\n    }\n\n    const getTasks = () => { // check every time one is finished\n      console.log('GET MORE');\n      for (const letter of alphabet) {\n        if (\n          assignedTasks.indexOf(letter) === -1\n          && steps[letter].remaining.length === 0\n        ) {\n          availableTasks.push(letter);\n        }\n      }\n    }\n\n    const assignTasks = () => { // assign tasks whenever a task is available and a worker is free\n      availableTasks.forEach(task => {\n        for(let i = 0; i < workers.length; i++) {\n          if (\n            workers[i].task === null\n          ) {\n            workers[i].task = task;\n            workers[i].remainingSeconds = steps[task].time;\n            assignedTasks += task;\n            break;\n          }\n        }\n      });\n      availableTasks = [];\n    }\n\n    const runSecond = () => {\n      assignTasks();\n      const secondData = [\n        second,\n        workers[0].task || '.',\n        workers[1].task || '.',\n        workers[2].task || '.',\n        workers[3].task || '.',\n        workers[4].task || '.',\n        completedTasks,\n      ]\n      second++;\n      workers.forEach((workerObj, worker) => {\n        if (workerObj.task) {\n          workers[worker].remainingSeconds--;\n          if (workers[worker].remainingSeconds === 0) {\n            prereqComplete(workerObj.task);\n            completedTasks += workerObj.task;\n            workers[worker].task = null;\n            getTasks();\n          }\n        }\n      });\n      seconds.push(secondData);\n    }\n\n    getTasks();\n    assignTasks();\n\n    while (completedTasks.length < 26) {\n      runSecond();\n    }\n\n    runSecond();\n\n    // display\n\n    let rows = [];\n    let answer;\n\n    seconds.forEach((secondData, rowIndex) => {\n      let cells = [];\n      secondData.forEach((cellContent, cellIndex) => {\n        cells.push(<td key={cellIndex}>{cellContent}</td>);\n        if (\n          rowIndex === seconds.length - 1\n          && cellIndex === 0\n        ) {\n          answer = cellContent;\n        }\n      });\n      rows.push(<tr key={rowIndex}>{cells}</tr>);\n    });\n\n    this.setState({\n      content: [\n        rows,\n        answer,\n      ],\n    });\n\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      console.log(err);\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <Table className=\"my-4\" size=\"sm\" striped hover>\n          <thead>\n            <tr>\n              <th>Second</th>\n              <th>Worker 1</th>\n              <th>Worker 2</th>\n              <th>Worker 3</th>\n              <th>Worker 4</th>\n              <th>Worker 5</th>\n              <th>Done</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.content[0]}\n          </tbody>\n        </Table>\n        <Jumbotron className=\"my-4 Solution__Jumbotron\">\n          <h3>How many seconds will it take to complete all of the steps?</h3>\n          <hr className=\"my-2\" />\n          <div>{this.state.content[1]}</div>\n        </Jumbotron>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split(' ').map(Number);\n    console.log(dataArr);\n\n    const levels = [];\n    const nodes = {};\n\n    let currentLevel = 0;\n    levels[currentLevel] = [];\n    let currentNodeId = 0;\n    let highestNodeId = 0;\n    let currentParentId = null;\n\n    const addShell = (childCount, metaCount, parentId) => {\n\n      const shell = {\n        childCount,\n        childrenRemaining: childCount,\n        level: currentLevel,\n        metaCount,\n        meta: null,\n        parentId,\n      };\n      levels[currentLevel].push(shell);\n      nodes[currentNodeId] = shell;\n\n    }\n\n\n    let i = 0;\n    let merry = 'christmas';\n\n    while (merry === 'christmas') {\n\n      let currentNode = nodes[currentNodeId];\n\n      if (!currentNode) {\n\n        // init\n        const childCount = dataArr[0];\n        const metaCount = dataArr[1];\n        addShell(childCount, metaCount, currentParentId);\n\n      } else if (currentNode.childrenRemaining) {\n\n        // console.log('node has children to process');\n        currentLevel++;\n        currentNode.childrenRemaining--;\n        if (!levels[currentLevel]) levels[currentLevel] = [];\n        currentParentId = currentNodeId;\n        highestNodeId++;\n        currentNodeId = highestNodeId;\n        i += 2;\n        const childCount = dataArr[0 + i];\n        const metaCount = dataArr[1 + i];\n        addShell(childCount, metaCount, currentParentId);\n\n      } else {\n\n        // console.log('node is out of children');\n        i += 2;\n        const meta = dataArr.slice(i, i + currentNode.metaCount);\n        i += currentNode.metaCount;\n        currentNode.meta = meta;\n        const parentNodeId = nodes[currentNodeId].parentId;\n        if (parentNodeId === null) {\n          console.log('momma node is out of children, all done.');\n          break;\n        }\n        if (!nodes[parentNodeId].childrenRemaining) {\n          // console.log('nodes parent is out of children, back to parent');\n          currentLevel--;\n          currentNodeId = parentNodeId;\n          currentNode = nodes[currentNodeId];\n          currentParentId = nodes[currentNodeId].parentId;\n          i -= 2; // step back 2 to \"neutralize\" with upcoming added 2\n        } else {\n          // console.log('nodes parent still has children, on to the next');\n          nodes[parentNodeId].childrenRemaining--;\n          highestNodeId++;\n          currentNodeId = highestNodeId;\n          const childCount = dataArr[0 + i];\n          const metaCount = dataArr[1 + i];\n          addShell(childCount, metaCount, currentParentId);\n        }\n\n      }\n\n    }\n\n    console.log(nodes);\n\n\n\n    let metaTotal = 0;\n\n    for (let node in nodes) {\n      const metaArr = nodes[node].meta;\n      for (let num of metaArr) {\n        metaTotal += num;\n      }\n    }\n\n    let content = `What is the sum of all metadata entries? ${metaTotal}!`\n\n\n    this.setState({\n      content\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <div className=\"my-4 monospace\">\n          {this.state.content}\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n    const dataArr = data.split(' ').map(Number);\n\n    const levels = [];\n    const nodes = {};\n\n    let currentLevel = 0;\n    levels[currentLevel] = [];\n    let currentNodeId = 0;\n    let highestNodeId = 0;\n    let currentParentId = null;\n\n    const addShell = (childCount, metaCount, parentId) => {\n\n      const shell = {\n        childCount,\n        children: [],\n        childrenRemaining: childCount,\n        id: currentNodeId,\n        level: currentLevel,\n        meta: null,\n        metaCount,\n        parentId,\n        value: null,\n      };\n      levels[currentLevel].push(shell);\n      nodes[currentNodeId] = shell;\n\n    }\n\n\n    let i = 0;\n    let merry = 'christmas';\n\n    while (merry === 'christmas') {\n\n      let currentNode = nodes[currentNodeId];\n\n      if (!currentNode) {\n\n        // init\n        const childCount = dataArr[0];\n        const metaCount = dataArr[1];\n        addShell(childCount, metaCount, currentParentId);\n\n      } else if (currentNode.childrenRemaining) {\n\n        // console.log('node has children to process');\n        currentLevel++;\n        currentNode.childrenRemaining--;\n        if (!levels[currentLevel]) levels[currentLevel] = [];\n        currentParentId = currentNodeId;\n        highestNodeId++;\n        currentNodeId = highestNodeId;\n        nodes[currentParentId].children.push(currentNodeId);\n        i += 2;\n        const childCount = dataArr[0 + i];\n        const metaCount = dataArr[1 + i];\n        addShell(childCount, metaCount, currentParentId);\n\n      } else {\n\n        // console.log('node is out of children');\n        i += 2;\n        const meta = dataArr.slice(i, i + currentNode.metaCount);\n        i += currentNode.metaCount;\n        currentNode.meta = meta;\n        const parentNodeId = nodes[currentNodeId].parentId;\n        if (parentNodeId === null) {\n          console.log('momma node is out of children, all done.');\n          break;\n        }\n        if (!nodes[parentNodeId].childrenRemaining) {\n          // console.log('nodes parent is out of children, back to parent');\n          currentLevel--;\n          currentNodeId = parentNodeId;\n          currentNode = nodes[currentNodeId];\n          currentParentId = nodes[currentNodeId].parentId;\n          i -= 2; // step back 2 to \"neutralize\" with upcoming added 2\n        } else {\n          // console.log('nodes parent still has children, on to the next');\n          nodes[parentNodeId].childrenRemaining--;\n          highestNodeId++;\n          currentNodeId = highestNodeId;\n          nodes[parentNodeId].children.push(currentNodeId);\n          const childCount = dataArr[0 + i];\n          const metaCount = dataArr[1 + i];\n          addShell(childCount, metaCount, currentParentId);\n        }\n\n      }\n\n    }\n\n    const sum = array => array.reduce((a, b) => a + b, 0);\n\n    for (let level = levels.length - 1; level >= 0; level--) {\n\n      const currentLevel = levels[level];\n\n      for (const node of currentLevel) {\n\n        const meta = node.meta;\n        const children = node.children;\n\n        if (node.childCount === 0) {\n\n          const value = sum(meta);\n          node.value = value;\n\n        } else {\n\n          for (const num of meta) {\n            const childIndex = num - 1;\n            const childId = children[childIndex];\n            if (childId) {\n              node.value += nodes[childId].value;\n            }\n          }\n\n        }\n\n      }\n\n\n    }\n\n    console.log(levels);\n    const content = `What is the value of the root node? ${nodes[0].value}`\n\n    this.setState({\n      content\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <div className=\"my-4 monospace\">\n          {this.state.content}\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\nimport { Jumbotron } from 'reactstrap';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n\n    const dataRegex = /(.*?) players; last marble is worth (.*?) points$/g;\n    const result = dataRegex.exec(data);\n    const playerCount = Number(result[1]);\n    const lastMarble = Number(result[2]);\n\n    const circle = [];\n    const players = Array.from(Array(playerCount).keys(), playerIndex => playerIndex + 1);\n    const turns = [];\n    const scores = {};\n    players.forEach(playerId => {\n      scores[playerId] = 0;\n    })\n\n    // init\n    let playMarble = 0;\n    let player = null;\n    let value = 0;\n    circle.push(playMarble);\n    turns.push({\n      player,\n      value,\n    });\n    let currentMarbleIndex = 0;\n    playMarble++;\n\n\n    for (; playMarble <= lastMarble; playMarble++) {\n\n      if (playMarble % 100000 === 0) console.log(playMarble); // progress check\n\n\n      player = players[( playMarble % players.length ) - 1] || players[players.length - 1];\n      value = 0;\n\n      if (playMarble % 23 === 0) {\n        // yeehaw\n        value += playMarble;\n        let stealMarbleIndex = currentMarbleIndex - 7;\n        if (stealMarbleIndex < 0) {\n          stealMarbleIndex += circle.length;\n        }\n        const stealMarble = circle[stealMarbleIndex];\n        value += stealMarble;\n        circle.splice(stealMarbleIndex, 1);\n        currentMarbleIndex = stealMarbleIndex;\n        if (currentMarbleIndex === circle.length) {\n          currentMarbleIndex = 0;\n        }\n        scores[player] += value;\n\n      } else {\n\n        let playMarbleIndex = currentMarbleIndex + 2;\n        if (playMarbleIndex >= circle.length + 1) {\n          playMarbleIndex -= circle.length;\n        }\n\n        // add marble at index\n        circle.splice(playMarbleIndex, 0, playMarble);\n        currentMarbleIndex = playMarbleIndex;\n\n      }\n\n      turns.push({\n        player,\n        value,\n      })\n\n    }\n\n    console.log(circle);\n    console.log(turns);\n    console.log(scores);\n\n    let winningPlayer;\n    let highestScore = 0;\n\n    for (let player in scores) {\n      if (scores[player] > highestScore) {\n        highestScore = scores[player];\n        winningPlayer = player;\n      }\n    }\n\n    let content = [\n      `What is the winning Elf's score?`,\n      `Player ${winningPlayer} won with ${highestScore} points!`,\n    ];\n\n    this.setState({\n      content,\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <div className=\"my-4\">\n          <Jumbotron className=\"Solution__Jumbotron\">\n            <h3>{this.state.content[0]}</h3>\n            <hr className=\"my-2\" />\n            <div>{this.state.content[1]}</div>\n          </Jumbotron>\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React from 'react';\n\nimport PuzzleError from '../PuzzleError';\n\nclass CurrentSolution extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      content: '',\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  runSolution() {\n\n    const currentDay = this.props.currentPuzzleStr.substring(0, this.props.currentPuzzleStr.length-5);\n    const codysData = require(`../data/${currentDay}`);\n    const data = this.props.customPuzzleInput ? this.props.customPuzzleInput : codysData.default;\n\n    const dataRegex = /(.*?) players; last marble is worth (.*?) points$/g;\n    const result = dataRegex.exec(data);\n    const playerCount = Number(result[1]);\n    const lastMarble = Number(result[2])*100;\n\n    const circle = [];\n    const players = Array.from(Array(playerCount).keys(), playerIndex => playerIndex + 1);\n    const turns = [];\n    const scores = {};\n    players.forEach(playerId => {\n      scores[playerId] = 0;\n    })\n\n    // init\n    let playMarble = 0;\n    let player = null;\n    let value = 0;\n    circle.push(playMarble);\n    turns.push({\n      player,\n      value,\n    });\n    let currentMarbleIndex = 0;\n    playMarble++;\n\n\n    for (; playMarble <= lastMarble; playMarble++) {\n\n      if (playMarble % 100000 === 0) console.log(playMarble); // progress check\n\n\n      player = players[( playMarble % players.length ) - 1] || players[players.length - 1];\n      value = 0;\n\n      if (playMarble % 23 === 0) {\n        // yeehaw\n        value += playMarble;\n        let stealMarbleIndex = currentMarbleIndex - 7;\n        if (stealMarbleIndex < 0) {\n          stealMarbleIndex += circle.length;\n        }\n        const stealMarble = circle[stealMarbleIndex];\n        value += stealMarble;\n        circle.splice(stealMarbleIndex, 1);\n        currentMarbleIndex = stealMarbleIndex;\n        if (currentMarbleIndex === circle.length) {\n          currentMarbleIndex = 0;\n        }\n        scores[player] += value;\n\n      } else {\n\n        let playMarbleIndex = currentMarbleIndex + 2;\n        if (playMarbleIndex >= circle.length + 1) {\n          playMarbleIndex -= circle.length;\n        }\n\n        // add marble at index\n        circle.splice(playMarbleIndex, 0, playMarble);\n        currentMarbleIndex = playMarbleIndex;\n\n      }\n\n      turns.push({\n        player,\n        value,\n      })\n\n    }\n\n    console.log(circle);\n    console.log(turns);\n    console.log(scores);\n\n    let winningPlayer;\n    let highestScore = 0;\n\n    for (let player in scores) {\n      if (scores[player] > highestScore) {\n        highestScore = scores[player];\n        winningPlayer = player;\n      }\n    }\n\n    let content = `What is the winning Elf's score? Player ${winningPlayer} won with ${highestScore} points!`;\n\n    this.setState({\n      content,\n    });\n\n  }\n\n  componentDidMount() {\n\n    try {\n      this.runSolution();\n    } catch(err) {\n      this.setState({ hasError: true });\n    }\n\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <PuzzleError customPuzzleInput={this.props.customPuzzleInput}/>;\n    }\n\n    return (\n      <div>\n        <div className=\"my-4 monospace\">\n          {this.state.content}\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default CurrentSolution;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Main from './Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { hot } from 'react-hot-loader'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      customPuzzleInputsOn: false,\n    };\n  }\n\n  setCustomPuzzleInputsOn(bool) {\n    this.setState({\n      customPuzzleInputsOn: bool,\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header\n          customPuzzleInputsOn={this.state.customPuzzleInputsOn}\n          setCustomPuzzleInputsOn={bool => this.setCustomPuzzleInputsOn(bool)}\n        />\n        <Main\n          customPuzzleInputsOn={this.state.customPuzzleInputsOn}\n          setCustomPuzzleInputsOn={bool => this.setCustomPuzzleInputsOn(bool)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nexport default class Header extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      navIsOpen: false,\n      dropdownIsOpen: false,\n    };\n  }\n\n  toggle(item) {\n    this.setState({\n      [item]: !this.state[item],\n    });\n  }\n\n  render() {\n    const puzzleInputName = this.props.customPuzzleInputsOn ? 'Custom' : 'Cody’s';\n    return (\n      <div className=\"Header\">\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand href=\"/\">Advent of Code 2018</NavbarBrand>\n          <NavbarToggler onClick={() => this.toggle('navIsOpen')} />\n          <Collapse isOpen={this.state.navIsOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"https://gitlab.com/uturnr/advent-of-bad-code-2018\">GitLab</NavLink>\n              </NavItem>\n              <Dropdown isOpen={this.state.dropdownIsOpen} toggle={() => this.toggle('dropdownIsOpen')} nav inNavbar>\n                <DropdownToggle nav caret>\n                  {`Using ${puzzleInputName} Puzzle Inputs`}\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    <div onClick={() => this.props.setCustomPuzzleInputsOn(false)}>\n                      Use Cody’s Puzzle Inputs\n                    </div>\n                  </DropdownItem>\n                  <DropdownItem>\n                    <div onClick={() => this.props.setCustomPuzzleInputsOn(true)}>\n                      Use Custom Puzzle Inputs\n                    </div>\n                  </DropdownItem>\n                </DropdownMenu>\n              </Dropdown>\n          </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Card, Button, ButtonGroup, CardTitle, Row, Col } from 'reactstrap';\n\nclass Home extends Component {\n\n  render() {\n\n    let days = [\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12\n    ];\n\n    let content = [];\n\n    days.forEach((day, index) => {\n      content.push(\n        <Col key={index} className=\"my-2\">\n          <Card body>\n            <CardTitle>Day {day}</CardTitle>\n            <ButtonGroup>\n              <Button onClick={() => this.props.history.push(`${process.env.PUBLIC_URL}/puzzle?id=Day${day}Part1`)}>Part 1</Button>\n              <Button onClick={() => this.props.history.push(`${process.env.PUBLIC_URL}/puzzle?id=Day${day}Part2`)}>Part 2</Button>\n            </ButtonGroup>\n          </Card>\n        </Col>\n      );\n    })\n\n    return (\n      <div className=\"Home\">\n        <Row>\n          {content}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { Alert, Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass PuzzleInput extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputData: '',\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.setStartPuzzle(false);\n    this.props.setCustomPuzzleInput(this.state.inputData);\n  }\n\n  render() {\n\n    let content;\n\n    if (this.props.customPuzzleInput) {\n\n      content = (\n        <Alert className=\"mt-4\" color=\"primary\">\n          <p>{`You are using a Custom Puzzle Input. `}</p>\n          <hr />\n          <div>\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                this.props.setStartPuzzle(false);\n                this.props.setCustomPuzzleInput(null);\n              }}\n              size=\"sm\"\n            >\n              Edit Input\n            </Button>\n            {' '}\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                this.props.setStartPuzzle(false);\n                this.props.setCustomPuzzleInput(null);\n                this.props.setCustomPuzzleInputsOn(false);\n              }}\n              size=\"sm\"\n            >\n              Use Cody's Input\n            </Button>\n          </div>\n        </Alert>\n      );\n\n    } else {\n\n      content = (\n        <Form className=\"mt-4\" onSubmit={e => this.handleSubmit(e)}>\n          <FormGroup>\n            <Label for=\"exampleText\">Your Puzzle Input</Label>\n            <Input\n              className=\"PuzzleInput__textarea\"\n              id=\"exampleText\"\n              name=\"text\"\n              onChange={e => this.setState({ inputData: e.target.value })}\n              type=\"textarea\"\n              value={this.state.inputData}\n            />\n          </FormGroup>\n          <Button>Submit</Button>\n        </Form>\n      );\n\n    }\n\n    return content;\n\n  }\n\n}\n\nexport default PuzzleInput;\n","import React from 'react';\nimport queryString from 'query-string';\nimport PuzzleInput from './PuzzleInput';\nimport { Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { FaArrowLeft } from 'react-icons/fa';\n\nconst preambles = {\n  Day9Part2: 'I started looking at making my solution efficient, and then just decided to let it run overnight. It took many hours. Click start at your own risk.',\n  Day11Part2: 'This one takes a while. Here, take this progress bar: ⏳. Also, if you navigate away, the site’s going to crash. I’m too lazy to cancel my promises. ⚰️',\n};\n\nclass Puzzle extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      customPuzzleInput: null,\n      started: false,\n    };\n  }\n\n  setCustomPuzzleInput(customPuzzleInput) {\n    this.setState({\n      customPuzzleInput,\n    });\n  }\n\n  setStartPuzzle(bool) {\n    this.setState({ started: bool });\n  }\n\n  render() {\n\n    const currentPuzzleStr = queryString.parse(this.props.location.search).id;\n    const currentPuzzleModule = require(`./solutions/${currentPuzzleStr}`);\n    const CurrentPuzzle = currentPuzzleModule.default;\n    const puzzleNameRegex = /Day(.*?)Part(.*?)$/g;\n    const result = puzzleNameRegex.exec(currentPuzzleStr);\n    const day = result[1];\n    const part = result[2];\n    const puzzleDisplayName = `Day ${day}, Part ${part}`;\n\n    let puzzleInput;\n    let startButton;\n    const preambleStr = preambles[currentPuzzleStr];\n    const preamble = preambleStr ? <p>{preambleStr}</p> : null;\n    const startButtonTemplate = (\n      <div className=\"mt-4\">\n        {preamble}\n        <Button onClick={() => this.setStartPuzzle(true)}>Start</Button>\n      </div>\n    );\n    let currentPuzzleComponent = <CurrentPuzzle\n      customPuzzleInput={this.state.customPuzzleInput}\n      currentPuzzleStr={currentPuzzleStr}\n    />;\n    let currentPuzzle = currentPuzzleComponent;\n\n    if (this.props.customPuzzleInputsOn) {\n      puzzleInput = <PuzzleInput\n        customPuzzleInput={this.state.customPuzzleInput}\n        setCustomPuzzleInput={input => this.setCustomPuzzleInput(input)}\n        setCustomPuzzleInputsOn={this.props.setCustomPuzzleInputsOn}\n        setStartPuzzle={bool => this.setStartPuzzle(bool)}\n      />;\n      if (!this.state.customPuzzleInput) {\n        currentPuzzle = null;\n      } else {\n        currentPuzzle = currentPuzzleComponent;\n      }\n    }\n\n    if (\n      !this.state.started\n      && (\n        !this.props.customPuzzleInputsOn\n        || (\n          this.props.customPuzzleInputsOn\n          && this.state.customPuzzleInput\n        )\n      )\n    ) {\n      currentPuzzle = null;\n      startButton = startButtonTemplate;\n    }\n\n    return (\n      <div className=\"Puzzle\">\n        <div className=\"text-left\">\n          <h1>{puzzleDisplayName}</h1>\n          <Link to={`${process.env.PUBLIC_URL}/`}><FaArrowLeft /><span className=\"Puzzle__back__text\">Back</span></Link>\n        </div>\n        {puzzleInput}\n        {startButton}\n        {currentPuzzle}\n      </div>\n    );\n\n  }\n\n}\n\nexport default Puzzle\n","import React, { Component } from 'react';\nimport Home from './Home';\nimport Puzzle from './Puzzle';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\n\nclass Main extends Component {\n\n  render() {\n\n    return (\n      <Router>\n        <div className=\"Main\">\n          <Container className=\"my-4 Main__container mw-100\">\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\n            <Route exact path={`${process.env.PUBLIC_URL}/puzzle`} render={props => (\n              <Puzzle\n                customPuzzleInputsOn={this.props.customPuzzleInputsOn}\n                setCustomPuzzleInputsOn={this.props.setCustomPuzzleInputsOn}\n                {...props}\n              />\n            )} />\n          </Container>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Main;\n","var map = {\n\t\"./Day10Part1\": 22,\n\t\"./Day10Part1.js\": 22,\n\t\"./Day10Part2\": 30,\n\t\"./Day10Part2.js\": 30,\n\t\"./Day11Part1\": 31,\n\t\"./Day11Part1.js\": 31,\n\t\"./Day11Part2\": 32,\n\t\"./Day11Part2.js\": 32,\n\t\"./Day12Part1\": 33,\n\t\"./Day12Part1.js\": 33,\n\t\"./Day12Part2\": 34,\n\t\"./Day12Part2.js\": 34,\n\t\"./Day6Part1\": 35,\n\t\"./Day6Part1.js\": 35,\n\t\"./Day6Part2\": 36,\n\t\"./Day6Part2.js\": 36,\n\t\"./Day7Part1\": 37,\n\t\"./Day7Part1.js\": 37,\n\t\"./Day7Part2\": 38,\n\t\"./Day7Part2.js\": 38,\n\t\"./Day8Part1\": 39,\n\t\"./Day8Part1.js\": 39,\n\t\"./Day8Part2\": 40,\n\t\"./Day8Part2.js\": 40,\n\t\"./Day9Part1\": 41,\n\t\"./Day9Part1.js\": 41,\n\t\"./Day9Part2\": 42,\n\t\"./Day9Part2.js\": 42\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 71;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root')\n\nReactDOM.render(\n  <App />,\n  rootEl\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}